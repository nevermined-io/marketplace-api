{
    "openapi": "3.0.0",
    "paths": {
        "/api/v1/metadata/assets/ddo": {
            "post": {
                "operationId": "AssetController_createAsset",
                "summary": "",
                "description": "Create a asset entry",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAssetDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "asset is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAssetDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    }
                },
                "tags": ["Asset"]
            },
            "get": {
                "operationId": "AssetController_getDDOAllAssets",
                "summary": "",
                "description": "Get DDO of all assets",
                "parameters": [{
                    "name": "query",
                    "required": false,
                    "in": "query",
                    "example": "{\"match_all\": {}}",
                    "description": "execute directly queries to elasticsearch from the client",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "text",
                    "required": false,
                    "in": "query",
                    "example": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
                    "description": "Text to search",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "offset",
                    "required": false,
                    "in": "query",
                    "example": 100,
                    "description": "Page Size",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "required": false,
                    "in": "query",
                    "example": 0,
                    "description": "Page to retrieve",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "required": false,
                    "in": "query",
                    "example": "{ \"createdAt\": \"asc\" }",
                    "description": "sort the response by specified parameter",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Assets Ids",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetAssetDto"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    }
                },
                "tags": ["Asset"]
            },
            "delete": {
                "operationId": "AssetController_deleteAllDDOs",
                "summary": "",
                "description": "Retire metadata of all assets",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Deleted all DDOs from marketplace"
                    }
                },
                "tags": ["Asset"]
            }
        },
        "/api/v1/metadata/assets": {
            "get": {
                "operationId": "AssetController_getAllAssetIds",
                "summary": "",
                "description": "Get all asset Ids",
                "parameters": [{
                    "name": "query",
                    "required": false,
                    "in": "query",
                    "example": "{\"match_all\": {}}",
                    "description": "execute directly queries to elasticsearch from the client",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "text",
                    "required": false,
                    "in": "query",
                    "example": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
                    "description": "Text to search",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "offset",
                    "required": false,
                    "in": "query",
                    "example": 100,
                    "description": "Page Size",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "required": false,
                    "in": "query",
                    "example": 0,
                    "description": "Page to retrieve",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "required": false,
                    "in": "query",
                    "example": "{ \"createdAt\": \"asc\" }",
                    "description": "sort the response by specified parameter",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Assets Ids",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": ["did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430"],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Asset"]
            }
        },
        "/api/v1/metadata/assets/ddo/query": {
            "get": {
                "operationId": "AssetController_listDDObyQuery",
                "summary": "",
                "description": "Get a list of DDOs that match with the given text",
                "parameters": [{
                    "name": "query",
                    "required": false,
                    "in": "query",
                    "example": "{\"match_all\": {}}",
                    "description": "execute directly queries to elasticsearch from the client",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "text",
                    "required": false,
                    "in": "query",
                    "example": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
                    "description": "Text to search",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "offset",
                    "required": false,
                    "in": "query",
                    "example": 100,
                    "description": "Page Size",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "required": false,
                    "in": "query",
                    "example": 0,
                    "description": "Page to retrieve",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "required": false,
                    "in": "query",
                    "example": "{ \"createdAt\": \"asc\" }",
                    "description": "sort the response by specified parameter",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "list of DDOs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetAssetDto"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    }
                },
                "tags": ["Asset"]
            },
            "post": {
                "operationId": "AssetController_listDDObyQueryPost",
                "summary": "",
                "description": "Get a list of DDOs that match with the executed query.",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QueryBodyDDOdto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "list of DDOs",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetAssetDto"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    }
                },
                "tags": ["Asset"]
            }
        },
        "/api/v1/metadata/assets/ddo/{did}": {
            "get": {
                "operationId": "AssetController_getDDO",
                "summary": "",
                "description": "Get DDO of a particular asset",
                "parameters": [{
                    "name": "did",
                    "required": true,
                    "in": "path",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Get a DDO",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAssetDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "tags": ["Asset"]
            },
            "put": {
                "operationId": "AssetController_updateDDO",
                "summary": "",
                "description": "Update DDO of an existing asset",
                "parameters": [{
                    "name": "did",
                    "required": true,
                    "in": "path",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAssetDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Get a updated DDO",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAssetDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "tags": ["Asset"]
            },
            "delete": {
                "operationId": "AssetController_deleteDDO",
                "parameters": [{
                    "name": "did",
                    "required": true,
                    "in": "path",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Deleted DDO"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "default": {
                        "description": "Retire metadata of an asset"
                    }
                },
                "tags": ["Asset"]
            }
        },
        "/api/v1/metadata/assets/metadata/{did}": {
            "get": {
                "operationId": "AssetController_getDDOMetadata",
                "parameters": [{
                    "name": "did",
                    "required": true,
                    "in": "path",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Get a metadata from asset",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttributesDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "default": {
                        "description": "Get metadata of a particular asset"
                    }
                },
                "tags": ["Asset"]
            }
        },
        "/api/v1/ugc/bookmarks": {
            "post": {
                "operationId": "BookmarkController_createBookmark",
                "summary": "",
                "description": "Create a bookmark entry",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBookmarkDto"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Bookmark is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBookmarkDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    }
                },
                "tags": [
                    "Bookmark"
                ]
            }
        },
        "/api/v1/ugc/bookmarks/{id}": {
            "get": {
                "operationId": "BookmarkController_getBookmarkById",
                "summary": "",
                "description": "Get a bookmark entry",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return a bookmark user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBookmarkDto"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "tags": [
                    "Bookmark"
                ]
            },
            "put": {
                "operationId": "BookmarkController_updateBookmarkById",
                "summary": "",
                "description": "Update an existing bookmark",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBookmarkDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return a updated bookmark",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBookmarkDto"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "tags": [
                    "Bookmark"
                ]
            },
            "delete": {
                "operationId": "BookmarkController_deleteBookmarkById",
                "summary": "",
                "description": "Delete a bookmark",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "return bookmark deleted"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "tags": [
                    "Bookmark"
                ]
            }
        },
        "/api/v1/ugc/bookmarks/user/{userId}": {
            "get": {
                "operationId": "BookmarkController_getBookmarksByUserId",
                "summary": "",
                "description": "Get all the user bookmarks",
                "parameters": [
                    {
                        "name": "userId",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "query",
                        "required": false,
                        "in": "query",
                        "example": "match_all: {}",
                        "description": "execute directly queries to elasticsearch from the client",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "text",
                        "required": false,
                        "in": "query",
                        "example": "Provident corrupti est nisi quia.",
                        "description": "Text to search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "example": 100,
                        "description": "Page Size",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "example": 0,
                        "description": "Page to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "required": false,
                        "in": "query",
                        "example": "{ \"createdAt\": \"asc\" }",
                        "description": "sort the response by specified parameter",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return all bookmark from a user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GetBookmarkDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bookmark"
                ]
            }
        }
    },
    "info": {
        "title": "Marketplace API",
        "description": "",
        "version": "0.1.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "schemas": {
            "AuthenticationDto": {
                "type": "object",
                "properties": {
                    "publicKey": {
                        "type": "string",
                        "example": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430",
                        "description": "Public key of ddo"
                    },
                    "type": {
                        "type": "string",
                        "example": "RsaSignatureAuthentication2018",
                        "description": "Type of the signature"
                    }
                },
                "required": ["publicKey", "type"]
            },
            "ProofDto": {
                "type": "object",
                "properties": {
                    "created": {
                        "type": "string",
                        "example": "2022-01-08T16:02:20Z",
                        "description": "Date of the proof"
                    },
                    "creator": {
                        "type": "string",
                        "example": "2022-01-08T16:02:20Z",
                        "description": "Wallet address who created the proof signature"
                    },
                    "signatureValue": {
                        "type": "string",
                        "example": "0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b",
                        "description": "Value of the signature"
                    },
                    "type": {
                        "type": "string",
                        "example": "DDOIntegritySignature",
                        "description": "Type of the proof"
                    }
                },
                "required": ["created", "creator", "signatureValue", "type"]
            },
            "PublicKeyDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430",
                        "description": "Id of the public key"
                    },
                    "owner": {
                        "type": "string",
                        "example": "0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e",
                        "description": "Wallet address who own the public key"
                    },
                    "type": {
                        "type": "string",
                        "example": "EthereumECDSAKey",
                        "description": "Type of the public key"
                    }
                },
                "required": ["id", "owner", "type"]
            },
            "CurationDto": {
                "type": "object",
                "properties": {
                    "numVotes": {
                        "type": "number",
                        "example": 123,
                        "description": "Number of votes. 0 is the default value"
                    },
                    "rating": {
                        "type": "number",
                        "example": 0.93,
                        "description": "Decimal value between 0 and 1. 0 is the default value"
                    },
                    "schema": {
                        "type": "string",
                        "example": "Binary Voting",
                        "description": "Schema applied to calculate the rating"
                    },
                    "isListed": {
                        "type": "boolean",
                        "example": false,
                        "description": "Flag unsuitable content. False by default. If it's true, the content must not be returned"
                    }
                },
                "required": ["numVotes", "rating"]
            },
            "FileDto": {
                "type": "object",
                "properties": {
                    "checksum": {
                        "type": "string",
                        "example": "efb2c764274b745f5fc37f97c6b0e761",
                        "description": "Checksum of the file using your preferred format (i.e. MD5). Format specified in checksumType.If it's not provided can't be validated if the file was not modified after registering"
                    },
                    "url": {
                        "type": "string",
                        "example": "https://raw.githubusercontent.com/tbertinmahieux/MSongsDB/master/Tasks_Demos/CoverSongs/shs_dataset_test.txt",
                        "description": "Content URL. Omitted from the remote metadata. Supports http(s):// and ipfs:// URLs"
                    },
                    "checksumType": {
                        "type": "string",
                        "example": "md5",
                        "description": "Format of the provided checksum. Can vary according to server (i.e Amazon vs. Azure)"
                    },
                    "name": {
                        "type": "string",
                        "example": "data.txt",
                        "description": "File name"
                    },
                    "compression": {
                        "type": "string",
                        "example": "zip",
                        "description": "File compression (e.g. no, gzip, bzip2, etc)"
                    },
                    "contentLength": {
                        "type": "string",
                        "example": "4535431",
                        "description": "Size of the file in bytes"
                    },
                    "contentType": {
                        "type": "string",
                        "example": "text/csv",
                        "description": "File format"
                    },
                    "encoding": {
                        "type": "string",
                        "example": "UTF-8",
                        "description": "File encoding (e.g. UTF-8)"
                    },
                    "index": {
                        "type": "number",
                        "example": 0,
                        "description": "Index of the file"
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "access-log2018-02-13-15-17-29-18386C502CAEA932",
                        "description": "Remote identifier of the file in the external provider. It is typically the remote id in the cloud provider"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "example": false,
                        "description": "Boolean. Is the file encrypted? If is not set is assumed the file is not encrypted"
                    },
                    "encryptionMode": {
                        "type": "string",
                        "example": "gpg",
                        "description": "Encryption mode used. Just valid if encrypted=true"
                    }
                },
                "required": ["contentType", "index"]
            },
            "ContainerDto": {
                "type": "object",
                "properties": {
                    "entrypoint": {
                        "type": "string",
                        "example": "node $ALGO",
                        "description": "The command to execute, or script to run inside the Docker image"
                    },
                    "image": {
                        "type": "string",
                        "example": "node",
                        "description": "Name of the Docker image"
                    },
                    "tag": {
                        "type": "string",
                        "example": "10",
                        "description": "Tag of the Docker image"
                    }
                }
            },
            "AlgorithmDto": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": "string",
                        "example": "scala",
                        "description": "Language used to implement the software"
                    },
                    "format": {
                        "type": "string",
                        "example": "docker-image",
                        "description": "Packaging format of the software"
                    },
                    "version": {
                        "type": "string",
                        "example": "0.1",
                        "description": "Version of the software"
                    },
                    "container": {
                        "description": "Object describing the Docker container image",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ContainerDto"
                        }
                    }
                },
                "required": ["container"]
            },
            "MainDto": {
                "type": "object",
                "properties": {
                    "author": {
                        "type": "string",
                        "example": "Met Office",
                        "description": "Name of the entity generating this data (e.g. Tfl, Disney Corp, etc.)"
                    },
                    "dateCreated": {
                        "type": "string",
                        "example": "2021-02-01T10:55:11Z",
                        "description": "The date on which the asset was created by the originator.ISO 8601 format, Coordinated Universal Time, e.g. 2019-01-31T08:38:32Z"
                    },
                    "datePublished": {
                        "type": "string",
                        "example": "2021-02-01T10:55:11Z",
                        "description": "The date on which the asset DDO is registered into the metadata store"
                    },
                    "encryptedFiles": {
                        "type": "string",
                        "example": "0x098213xzckasdf089723hjgdasfkjgasfv",
                        "description": "files encrytion signature"
                    },
                    "files": {
                        "description": "Array of File objects including the encrypted file urls. Further metadata about each file is stored",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileDto"
                        }
                    },
                    "license": {
                        "type": "number",
                        "example": "CC-BY",
                        "description": "Short name referencing the license of the asset (e.g. Public Domain, CC-0, CC-BY, No License Specified, etc.). If it's not specified, the following value will be added: \"No License Specified"
                    },
                    "name": {
                        "type": "string",
                        "example": "UK Weather information 2011",
                        "description": "Descriptive name or title of the asset"
                    },
                    "price": {
                        "type": "string",
                        "example": "10",
                        "description": "Price of the asset. It must be an integer encoded as a string, e.g. \"123000000000000000000\""
                    },
                    "type": {
                        "type": "string",
                        "example": "dataset",
                        "description": "Type of the asset. Helps to filter by the type of asset. It could be for example (\"dataset\", \"algorithm\")"
                    },
                    "algorithm": {
                        "description": "Algorithm used in the asset",
                        "allOf": [{
                            "$ref": "#/components/schemas/AlgorithmDto"
                        }]
                    }
                },
                "required": ["author", "dateCreated", "encryptedFiles", "files", "license", "name", "price", "type", "algorithm"]
            },
            "ConditionDependencyDto": {
                "type": "object",
                "properties": {
                    "access": {
                        "example": [],
                        "description": "Access",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "escrowPayment": {
                        "example": ["lockPayment", "access"],
                        "description": "Escrow Payment",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "execCompute": {
                        "example": [],
                        "description": "Exec Compute",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lockPayment": {
                        "example": [],
                        "description": "Lock Payment",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": ["access", "escrowPayment", "execCompute", "lockPayment"]
            },
            "HandlerDto": {
                "type": "object",
                "properties": {
                    "functionName": {
                        "type": "string",
                        "example": "fulfill",
                        "description": "Function name"
                    },
                    "moduleName": {
                        "type": "string",
                        "example": "lockPaymentConditon",
                        "description": "Module name"
                    },
                    "version": {
                        "type": "string",
                        "example": "0.1",
                        "description": "Version of the handler"
                    }
                },
                "required": ["functionName", "moduleName", "version"]
            },
            "EventDto": {
                "type": "object",
                "properties": {
                    "actionType": {
                        "type": "string",
                        "example": "publisher",
                        "description": "Action Type"
                    },
                    "handler": {
                        "description": "Handler event",
                        "allOf": [{
                            "$ref": "#/components/schemas/HandlerDto"
                        }]
                    },
                    "name": {
                        "type": "string",
                        "example": "Fulfilled",
                        "description": "Name of the event"
                    }
                },
                "required": ["actionType", "handler", "name"]
            },
            "ParameterDto": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "_rewardAddress",
                        "description": "Parameter name"
                    },
                    "type": {
                        "type": "string",
                        "example": "address",
                        "description": "Parameter type"
                    },
                    "value": {
                        "type": "object",
                        "example": "0x886dE2b3F8F27eEd43bA2FD4bC2AabDc14E0d9dD",
                        "description": "Parameter value"
                    }
                },
                "required": ["name", "type", "value"]
            },
            "ConditionDto": {
                "type": "object",
                "properties": {
                    "contractName": {
                        "type": "string",
                        "example": "LockPaymentCondition",
                        "description": "Contract name"
                    },
                    "functionName": {
                        "type": "string",
                        "example": "fulfill",
                        "description": "Function name"
                    },
                    "name": {
                        "type": "string",
                        "example": "lockPayment",
                        "description": "Function name"
                    },
                    "events": {
                        "description": "Events",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventDto"
                        }
                    },
                    "parameters": {
                        "description": "Parameters",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ParameterDto"
                        }
                    },
                    "timelock": {
                        "type": "number",
                        "example": 0,
                        "description": "Time lock"
                    },
                    "timeout": {
                        "type": "number",
                        "example": 0,
                        "description": "Time out"
                    }
                },
                "required": ["contractName", "functionName", "name", "events", "parameters", "timelock", "timeout"]
            },
            "ServiceAgreementTemplateDto": {
                "type": "object",
                "properties": {
                    "conditionDependency": {
                        "description": "",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConditionDependencyDto"
                        }
                    },
                    "conditions": {
                        "description": "Conditions",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConditionDto"
                        }
                    },
                    "contractName": {
                        "type": "number",
                        "example": "EscrowAccessSecretStoreTemplate",
                        "description": "Contract Name"
                    },
                    "events": {
                        "description": "Events",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventDto"
                        }
                    },
                    "fulfillmentOrder": {
                        "type": "string",
                        "example": ["lockPayment.fulfill", "access.fulfill", "escrowPayment.fulfill"],
                        "description": "Fulfillment order"
                    }
                },
                "required": ["conditionDependency", "conditions", "contractName", "events"]
            },
            "AttributesDto": {
                "type": "object",
                "properties": {
                    "additionalInformation": {
                        "type": "object",
                        "description": "Aditional information of the asset"
                    },
                    "curation": {
                        "description": "popularity of the asset",
                        "allOf": [{
                            "$ref": "#/components/schemas/CurationDto"
                        }]
                    },
                    "main": {
                        "description": "Main data of the asset",
                        "allOf": [{
                            "$ref": "#/components/schemas/MainDto"
                        }]
                    },
                    "serviceAgreementTemplate": {
                        "description": "Service agreement template",
                        "allOf": [{
                            "$ref": "#/components/schemas/ServiceAgreementTemplateDto"
                        }]
                    }
                },
                "required": ["curation", "main"]
            },
            "ServiceDto": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "number",
                        "example": 0,
                        "description": "index of the service"
                    },
                    "serviceEndpoint": {
                        "type": "string",
                        "example": "http://localhost:8030/api/v1/gateway/services/consume",
                        "description": "Url of the service endpoint"
                    },
                    "type": {
                        "type": "string",
                        "example": "access",
                        "description": "Service type"
                    },
                    "service": {
                        "type": "string",
                        "example": "SecretStore",
                        "description": "Service name"
                    },
                    "purchaseEndpoint": {
                        "type": "string",
                        "example": "http://localhost:8030/api/v1/gateway/services/access/initialize",
                        "description": "Url to purchase asset"
                    },
                    "attributes": {
                        "description": "Attribute of the metadata",
                        "allOf": [{
                            "$ref": "#/components/schemas/AttributesDto"
                        }]
                    }
                },
                "required": ["index", "serviceEndpoint", "type"]
            },
            "CreateAssetDto": {
                "type": "object",
                "properties": {
                    "@context": {
                        "type": "string",
                        "example": "https://w3id.org/did/v1",
                        "description": "Context of the asset"
                    },
                    "id": {
                        "type": "string",
                        "example": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429",
                        "description": "ID of the asset"
                    },
                    "created": {
                        "type": "string",
                        "example": "2019-02-08T08:13:49Z",
                        "description": "ID of the asset"
                    },
                    "updated": {
                        "type": "string",
                        "example": "2019-02-08T08:13:49Z",
                        "description": "ID of the asset"
                    },
                    "authentication": {
                        "description": "Authentication used in the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthenticationDto"
                        }
                    },
                    "proof": {
                        "description": "Proof data",
                        "allOf": [{
                            "$ref": "#/components/schemas/ProofDto"
                        }]
                    },
                    "publicKey": {
                        "description": "Public keys that contains the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicKeyDto"
                        }
                    },
                    "service": {
                        "example": [{
                            "index": 0,
                            "service": "SecretStore",
                            "serviceEndpoint": "http://localhost:12001",
                            "type": "authorization"
                        }, {
                            "index": 1,
                            "purchaseEndpoint": "http://localhost:8030/api/v1/gateway/services/access/initialize",
                            "serviceEndpoint": "http://localhost:8030/api/v1/gateway/services/consume",
                            "type": "access"
                        }, {
                            "attributes": {
                                "additionalInformation": {
                                    "copyrightHolder": "Met Office",
                                    "description": "Weather information of UK including temperature and humidity",
                                    "inLanguage": "en",
                                    "links": [{
                                        "name": "Sample of Asset Data",
                                        "type": "sample",
                                        "url": "https://foo.com/sample.csv"
                                    }],
                                    "tags": ["weather", "uk", "2011", "temperature", "humidity"],
                                    "workExample": "stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68"
                                },
                                "curation": {
                                    "numVotes": 123,
                                    "rating": 0.93,
                                    "schema": "Binary Voting"
                                },
                                "main": {
                                    "author": "Met Office",
                                    "dateCreated": "2012-02-01T10:55:11Z",
                                    "encryptedFiles": "0x098213xzckasdf089723hjgdasfkjgasfv",
                                    "files": [{
                                        "compression": "zip",
                                        "contentLength": "4535431",
                                        "contentType": "text/csv",
                                        "encoding": "UTF-8",
                                        "index": 0,
                                        "resourceId": "access-log2018-02-13-15-17-29-18386C502CAEA932"
                                    }],
                                    "license": "CC-BY",
                                    "name": "UK Weather information 2011",
                                    "price": "10",
                                    "type": "dataset"
                                }
                            },
                            "index": 2,
                            "serviceEndpoint": "http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430",
                            "type": "metadata"
                        }],
                        "description": "Services that contains the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceDto"
                        }
                    }
                },
                "required": ["@context", "id", "authentication", "proof", "publicKey", "service"]
            },
            "GetAssetDto": {
                "type": "object",
                "properties": {
                    "@context": {
                        "type": "string",
                        "example": "https://w3id.org/did/v1",
                        "description": "Context of the asset"
                    },
                    "authentication": {
                        "description": "Authentication used in the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthenticationDto"
                        }
                    },
                    "created": {
                        "type": "string",
                        "example": "2021-02-01T10:55:11Z",
                        "description": "Date when the asset is created"
                    },
                    "updated": {
                        "type": "string",
                        "example": "2021-02-01T10:55:11Z",
                        "description": "Date when the asset is created"
                    },
                    "id": {
                        "type": "string",
                        "example": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429",
                        "description": "ID of the asset"
                    },
                    "proof": {
                        "description": "Proof data",
                        "allOf": [{
                            "$ref": "#/components/schemas/ProofDto"
                        }]
                    },
                    "publicKey": {
                        "description": "Public keys that contains the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicKeyDto"
                        }
                    },
                    "service": {
                        "example": [{
                            "index": 0,
                            "service": "SecretStore",
                            "serviceEndpoint": "http://localhost:12001",
                            "type": "authorization"
                        }, {
                            "index": 1,
                            "purchaseEndpoint": "http://localhost:8030/api/v1/gateway/services/access/initialize",
                            "serviceEndpoint": "http://localhost:8030/api/v1/gateway/services/consume",
                            "type": "access"
                        }, {
                            "attributes": {
                                "additionalInformation": {
                                    "copyrightHolder": "Met Office",
                                    "description": "Weather information of UK including temperature and humidity",
                                    "inLanguage": "en",
                                    "links": [{
                                        "name": "Sample of Asset Data",
                                        "type": "sample",
                                        "url": "https://foo.com/sample.csv"
                                    }],
                                    "tags": ["weather", "uk", "2011", "temperature", "humidity"],
                                    "workExample": "stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68"
                                },
                                "curation": {
                                    "numVotes": 123,
                                    "rating": 0.93,
                                    "schema": "Binary Voting"
                                },
                                "main": {
                                    "author": "Met Office",
                                    "dateCreated": "2012-02-01T10:55:11Z",
                                    "encryptedFiles": "0x098213xzckasdf089723hjgdasfkjgasfv",
                                    "files": [{
                                        "compression": "zip",
                                        "contentLength": "4535431",
                                        "contentType": "text/csv",
                                        "encoding": "UTF-8",
                                        "index": 0,
                                        "resourceId": "access-log2018-02-13-15-17-29-18386C502CAEA932"
                                    }],
                                    "license": "CC-BY",
                                    "name": "UK Weather information 2011",
                                    "price": "10",
                                    "type": "dataset"
                                }
                            },
                            "index": 2,
                            "serviceEndpoint": "http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430",
                            "type": "metadata"
                        }],
                        "description": "Services that contains the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceDto"
                        }
                    }
                },
                "required": ["@context", "authentication", "created", "updated", "id", "proof", "publicKey", "service"]
            },
            "QueryBodyDDOdto": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "object",
                        "example": {
                            "match_all": {}
                        },
                        "description": "execute directly queries to elasticsearch from the client"
                    },
                    "text": {
                        "type": "string",
                        "example": "Eius vel alias.",
                        "description": "Text to search"
                    },
                    "offset": {
                        "type": "string",
                        "example": 100,
                        "description": "Page Size"
                    },
                    "page": {
                        "type": "string",
                        "example": 0,
                        "description": "Page to retrieve"
                    },
                    "sort": {
                        "type": "object",
                        "example": {
                            "created": "asc"
                        },
                        "description": "sort the response by specified parameter"
                    }
                }
            },
            "UpdateAssetDto": {
                "type": "object",
                "properties": {
                    "@context": {
                        "type": "string",
                        "example": "https://w3id.org/did/v1",
                        "description": "Context of the asset"
                    },
                    "updated": {
                        "type": "string",
                        "example": "2019-02-08T08:13:49Z",
                        "description": "ID of the asset"
                    },
                    "authentication": {
                        "description": "Authentication used in the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuthenticationDto"
                        }
                    },
                    "proof": {
                        "description": "Proof data",
                        "allOf": [{
                            "$ref": "#/components/schemas/ProofDto"
                        }]
                    },
                    "publicKey": {
                        "description": "Public keys that contains the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublicKeyDto"
                        }
                    },
                    "service": {
                        "example": [{
                            "index": 0,
                            "service": "SecretStore",
                            "serviceEndpoint": "http://localhost:12001",
                            "type": "authorization"
                        }, {
                            "index": 1,
                            "purchaseEndpoint": "http://localhost:8030/api/v1/gateway/services/access/initialize",
                            "serviceEndpoint": "http://localhost:8030/api/v1/gateway/services/consume",
                            "type": "access"
                        }, {
                            "attributes": {
                                "additionalInformation": {
                                    "copyrightHolder": "Met Office",
                                    "description": "Weather information of UK including temperature and humidity",
                                    "inLanguage": "en",
                                    "links": [{
                                        "name": "Sample of Asset Data",
                                        "type": "sample",
                                        "url": "https://foo.com/sample.csv"
                                    }],
                                    "tags": ["weather", "uk", "2011", "temperature", "humidity"],
                                    "workExample": "stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68"
                                },
                                "curation": {
                                    "numVotes": 123,
                                    "rating": 0.93,
                                    "schema": "Binary Voting"
                                },
                                "main": {
                                    "author": "Met Office",
                                    "dateCreated": "2012-02-01T10:55:11Z",
                                    "encryptedFiles": "0x098213xzckasdf089723hjgdasfkjgasfv",
                                    "files": [{
                                        "compression": "zip",
                                        "contentLength": "4535431",
                                        "contentType": "text/csv",
                                        "encoding": "UTF-8",
                                        "index": 0,
                                        "resourceId": "access-log2018-02-13-15-17-29-18386C502CAEA932"
                                    }],
                                    "license": "CC-BY",
                                    "name": "UK Weather information 2011",
                                    "price": "10",
                                    "type": "dataset"
                                }
                            },
                            "index": 2,
                            "serviceEndpoint": "http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430",
                            "type": "metadata"
                        }],
                        "description": "Services that contains the asset",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceDto"
                        }
                    }
                },
                "required": ["@context", "authentication", "proof", "publicKey", "service"]
            },
            "CreateBookmarkDto": {
                "type": "object",
                "properties": {
                    "did": {
                        "type": "string",
                        "example": "did:12345",
                        "description": "The identifier of the asset"
                    },
                    "userId": {
                        "type": "string",
                        "example": "u-12345",
                        "description": "The userId who created the bookmark"
                    },
                    "description": {
                        "type": "string",
                        "example": "I am interesting in this asset",
                        "description": "Description given by the user"
                    }
                },
                "required": [
                    "did",
                    "userId",
                    "description"
                ]
            },
            "GetBookmarkDto": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "b-123434",
                        "description": "The identifier of the bookmark"
                    },
                    "did": {
                        "type": "string",
                        "example": "did:12345",
                        "description": "The identifier of the asset"
                    },
                    "userId": {
                        "type": "string",
                        "example": "u-12345",
                        "description": "The userId who created the bookmark"
                    },
                    "description": {
                        "type": "string",
                        "example": "I am interesting in this asset",
                        "description": "Description given by the user"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string",
                        "example": "2022-03-18T13:44:00.931Z",
                        "description": "When the UGC was created"
                    }
                },
                "required": [
                    "id",
                    "did",
                    "userId",
                    "description",
                    "createdAt"
                ]
            },
            "UpdateBookmarkDto": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "example": "I am interesting in this asset",
                        "description": "Description given by the user"
                    }
                },
                "required": [
                    "description"
                ]
            }
        }
    }
}