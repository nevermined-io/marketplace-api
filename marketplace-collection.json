{
	"info": {
		"_postman_id": "4da3d21a-b484-42a5-bfcb-43047f168b2f",
		"name": "Marketplace API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api/v1/auth/login",
			"item": [
				{
					"name": "Auth Controller login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const util = require(\"util\");",
									"const ether_code = pm.environment.get('etherCode');",
									"const encodingCode = pm.environment.get('encodingCode');",
									"(new Function(ether_code))();",
									"(new Function(encodingCode))();",
									"",
									"const base64url = (input) => {",
									"    return Buffer.from(input).toString('base64').replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');",
									"};",
									"",
									"const concat = (...buffers) => {",
									"    const size = buffers.reduce((acc, { length }) => acc + length, 0);",
									"    const buf = new Uint8Array(size);",
									"    let i = 0;",
									"    buffers.forEach((buffer) => {",
									"      buf.set(buffer, i);",
									"      i += buffer.length;",
									"    });",
									"    return buf;",
									"};",
									"",
									"const walletMnemonic = new ethers.Wallet.fromMnemonic(pm.environment.get('mnemonic'));",
									"const wallet = new ethers.Wallet(walletMnemonic.privateKey);",
									"",
									"const encoder = new TextEncoder('').encode;",
									"const decoder = new TextDecoder().decode;",
									"",
									"const encodedPayload = encoder(base64url(JSON.stringify({",
									"    exp:1650532708,",
									"    iat:1650529108,",
									"    iss: wallet.address",
									"})));",
									"",
									"const encodedHeader = encoder(base64url(JSON.stringify({",
									"    alg:'ES256K'",
									"})));",
									"const dataJwt = concat(encodedHeader, encoder('.'), encodedPayload);",
									"",
									"wallet.signMessage(decoder(dataJwt)).then((sign) => {",
									"    const signed = base64url(ethers.utils.arrayify(sign));",
									"    const grantToken = `${decoder(encodedHeader)}.${decoder(encodedPayload)}.${signed}`;",
									"    pm.environment.set('etherKey', grantToken);",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/user_profile'),",
									"        method: 'PUT',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.sendRequest({",
									"            url: pm.collectionVariables.replaceIn('{{elsUrl}}/user_profile/_refresh'),",
									"            method: 'POST',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            },",
									"        })",
									"})",
									"",
									"pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/permission'),",
									"        method: 'PUT',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.sendRequest({",
									"            url: pm.collectionVariables.replaceIn('{{elsUrl}}/permission/_refresh'),",
									"            method: 'POST',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            },",
									"        })",
									"})",
									"",
									"setTimeout(()=> {}, 1000);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/user_profile/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        }",
									"    }, (err, resp) => {",
									"    pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/auth/login'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",",
									"                \"client_assertion\": pm.environment.get('etherKey'),",
									"            })",
									"        }",
									"    }, (error, authResponse) => {",
									"        pm.sendRequest({",
									"            url: pm.collectionVariables.replaceIn('{{elsUrl}}/user_profile/_refresh'),",
									"            method: 'POST',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            }",
									"        }, (error, response) => {",
									"            pm.sendRequest({",
									"                url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/profiles/address/{{publicAddress}}'),",
									"                method: 'GET',",
									"                header: {",
									"                    'Content-Type': 'application/json',",
									"                },",
									"            }, (error, profileResponse) => {",
									"                pm.test(\"should be able to login\", () => {",
									"                    pm.expect(authResponse).to.have.property('code', 201);",
									"                    pm.expect(authResponse.json()).to.have.property('access_token');",
									"                    pm.environment.set('authToken', authResponse.json().access_token);",
									"                });",
									"                pm.test(\"should get a created user profile\", () => {",
									"                    pm.expect(profileResponse).to.have.property('code', 200);",
									"                    pm.expect(profileResponse).to.have.property('status', 'OK');",
									"                    pm.expect(profileResponse.json().addresses.some(a => pm.environment.get('publicAddress'))).to.be.true;",
									"                    pm.environment.set('userId', profileResponse.json().userId);",
									"                });",
									"            });",
									"        });",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"{{etherKey}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login using a JWT claim for client authentication"
					},
					"response": [
						{
							"name": "The access_token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}"
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Auth Controller auth New Address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const util = require(\"util\");",
									"const ether_code = pm.environment.get('etherCode');",
									"const encodingCode = pm.environment.get('encodingCode');",
									"(new Function(ether_code))();",
									"(new Function(encodingCode))();",
									"",
									"const base64url = (input) => {",
									"    return Buffer.from(input).toString('base64').replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');",
									"};",
									"",
									"const concat = (...buffers) => {",
									"    const size = buffers.reduce((acc, { length }) => acc + length, 0);",
									"    const buf = new Uint8Array(size);",
									"    let i = 0;",
									"    buffers.forEach((buffer) => {",
									"      buf.set(buffer, i);",
									"      i += buffer.length;",
									"    });",
									"    return buf;",
									"};",
									"",
									"const newMnemonic = pm.environment.get('newMnemonic');",
									"const walletMnemonic = new ethers.Wallet.fromMnemonic(newMnemonic);",
									"const wallet = new ethers.Wallet(walletMnemonic.privateKey);",
									"",
									"const encoder = new TextEncoder().encode;",
									"const decoder = new TextDecoder().decode;",
									"",
									"const encodedPayload = encoder(base64url(JSON.stringify({",
									"    exp:1650532708,",
									"    iat:1650529108,",
									"    iss: wallet.address",
									"})));",
									"",
									"const encodedHeader = encoder(base64url(JSON.stringify({",
									"    alg:'ES256K'",
									"})));",
									"const dataJwt = concat(encodedHeader, encoder('.'), encodedPayload);",
									"",
									"wallet.signMessage(decoder(dataJwt)).then((sign) => {",
									"    const signed = base64url(ethers.utils.arrayify(sign));",
									"    const grantToken = `${decoder(encodedHeader)}.${decoder(encodedPayload)}.${signed}`;",
									"    pm.environment.set('newEtherKey', grantToken);",
									"    pm.environment.set('newPublicAddress', wallet.address);",
									"});",
									"",
									"setTimeout(()=> {}, 1000);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"pm.sendRequest({",
									"    url: pm.collectionVariables.replaceIn('{{elsUrl}}/user_profile/_refresh'),",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"}, () => {",
									"    pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/profiles/address/{{newPublicAddress}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, profileResponse) => {",
									"        pm.test(\"should get user profile with new address\", () => {",
									"            pm.expect(profileResponse).to.have.property('code', 200);",
									"            pm.expect(profileResponse).to.have.property('status', 'OK');",
									"            pm.expect(profileResponse.json().addresses.length).to.be.eq(2);",
									"        });",
									"    });",
									"})"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"{{newEtherKey}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"address"
							]
						},
						"description": "Add address to existing user profile"
					},
					"response": [
						{
							"name": "The access_token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"address"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"address"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized access",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_assertion_type\": \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n  \"client_assertion\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/auth/address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"address"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "api/v1/ugc/bookmarks",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Bookmark Controller get Bookmark By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks/{{id}}'),",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"    },",
											"}, (error, response) => {",
											"    pm.test(\"should get bookmark by passing id\", () => {",
											"        pm.expect(response).to.have.property('code', 200);",
											"        pm.expect(response.json()).to.have.property('userId', pm.environment.get('userId'));",
											"    });",
											"});",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks'),",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${pm.environment.get('authToken')}`",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({\"did\": \"did:12345\",\"userId\": pm.environment.get('userId'),\"description\": \"I am interesting in this asset\"})",
											"    }",
											"}, (error, response) => {",
											"    pm.environment.set(\"id\", response.json().id);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Get a bookmark entry"
							},
							"response": [
								{
									"name": "Return a bookmark user",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "bo-55db26f3-7ae6-401c-9552-cb0da28001a0",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"b-123434\",\n  \"did\": \"did:12345\",\n  \"userId\": \"u-12345\",\n  \"description\": \"I am interesting in this asset\",\n  \"createdAt\": \"2022-03-18T13:44:00.931Z\"\n}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Ut dolore",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Bookmark Controller update Bookmark By Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks'),",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"did\": \"did:12345\",\"userId\": pm.environment.get('userId'),\"description\": \"I am interesting in this asset\"})",
											"        }",
											"}, (error, response) => {",
											"    pm.environment.set(\"id\", response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks/{{id}}'),",
											"    method: 'PUT',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': `Bearer ${pm.environment.get('authToken')}`",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            description: 'This assets is the best'",
											"        }),",
											"    }",
											"}, (error, response) => {",
											"    pm.test(\"should update bookmark by passing id\", () => {",
											"        pm.expect(response).to.have.property('code', 200);",
											"        pm.expect(response.json()).to.have.property('description', 'This assets is the best');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"I am interesting in this asset\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Update an existing bookmark"
							},
							"response": [
								{
									"name": "Return a updated bookmark",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"I am interesting in this asset\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "bo-55db26f3-7ae6-401c-9552-cb0da28001a0",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"b-123434\",\n  \"did\": \"did:12345\",\n  \"userId\": \"u-12345\",\n  \"description\": \"I am interesting in this asset\",\n  \"createdAt\": \"2022-03-18T13:44:00.931Z\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"I am interesting in this asset\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "bo-55db26f3-7ae6-401c-9552-cb0da28001a0",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"I am interesting in this asset\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "bo-55db26f3-7ae6-401c-9552-cb0da28001a0",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"description\": \"I am interesting in this asset\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "bo-55db26f3-7ae6-401c-9552-cb0da28001a0",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Bookmark Controller delete Bookmark By Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks'),",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"did\": \"did:12345\",\"userId\": pm.environment.get('userId'),\"description\": \"I am interesting in this asset\"})",
											"        }",
											"}, (error, response) => {",
											"    pm.environment.set(\"id\", response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks'),",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({\"did\": \"did:12345\",\"description\": \"I am interesting in this asset\"})",
											"        }",
											"}, (error, bookmarkResp) => {",
											"    pm.sendRequest({",
											"        url: pm.environment.replaceIn(`{{baseUrl}}/api/v1/ugc/bookmarks/${bookmarkResp.json().id}`),",
											"        method: 'DELETE',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
											"        }",
											"    }, (error, response) => {",
											"        pm.test(\"should delete bookmark by passing id\", () => {",
											"            pm.expect(response).to.have.property('code', 200);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}"
										}
									]
								},
								"description": "Delete a bookmark"
							},
							"response": [
								{
									"name": "return bookmark deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Ut dolore",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Ut dolore",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"ugc",
												"bookmarks",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "Ut dolore",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Bookmark Controller create Bookmark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"did\": \"did:12345\",",
									"                \"description\": \"I am interesting in this asset\"",
									"            })",
									"        }",
									"    }, (error, response) => {",
									"        pm.test(\"should create bookmark\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"            pm.expect(response.json()).to.have.property('userId', pm.environment.get('userId'));",
									"        })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"did\": \"did:12345\",\n  \"description\": \"I am interesting in this asset\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/ugc/bookmarks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ugc",
								"bookmarks"
							]
						},
						"description": "Create a bookmark entry"
					},
					"response": [
						{
							"name": "Bookmark is created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"did\": \"did:12345\",\n  \"userId\": \"u-12345\",\n  \"description\": \"I am interesting in this asset\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"b-123434\",\n  \"did\": \"did:12345\",\n  \"userId\": \"u-12345\",\n  \"description\": \"I am interesting in this asset\",\n  \"createdAt\": \"2022-03-18T13:44:00.931Z\"\n}"
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"did\": \"did:12345\",\n  \"userId\": \"u-12345\",\n  \"description\": \"I am interesting in this asset\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"did\": \"did:12345\",\n  \"userId\": \"u-12345\",\n  \"description\": \"I am interesting in this asset\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Bookmark Controller get Bookmarks By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: pm.collectionVariables.replaceIn('{{elsUrl}}/bookmark/_refresh'),",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"}, (error, refreshResp) => {",
									"    pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks/user/{{userId}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.test(\"should get bookmarks by passing userId\", () => {",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response.json().results[0]).to.have.property('userId', pm.environment.get('userId'));",
									"        });",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/ugc/bookmarks'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({\"did\": \"did:12345\",\"userId\": pm.environment.get('userId'),\"description\": \"I am interesting in this asset\"})",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set(\"userId\", response.json().userId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/user/:userId?text=Provident corrupti est nisi quia.&offset=100&page=1&sort={ \"createdAt\": \"asc\" }",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ugc",
								"bookmarks",
								"user",
								":userId"
							],
							"query": [
								{
									"key": "text",
									"value": "Provident corrupti est nisi quia."
								},
								{
									"key": "offset",
									"value": "100",
									"description": "Page Size"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page to retrieve"
								},
								{
									"key": "sort",
									"value": "{ \"createdAt\": \"asc\" }",
									"description": "sort the response by specified parameter"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						},
						"description": "Get all the user bookmarks"
					},
					"response": [
						{
							"name": "Return all bookmark from a user",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/ugc/bookmarks/user/:userId?query={\"match_all\": {}}&text=Provident corrupti est nisi quia.&offset=100&page=1&sort={ \"createdAt\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"ugc",
										"bookmarks",
										"user",
										":userId"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}"
										},
										{
											"key": "text",
											"value": "Provident corrupti est nisi quia."
										},
										{
											"key": "offset",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "{ \"createdAt\": \"asc\" }"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"results\": [\n        {\n            \"id\": \"b-123434\",\n            \"did\": \"did:12345\",\n            \"userId\": \"u-12345\",\n            \"description\": \"I am interesting in this asset\",\n            \"createdAt\": \"2022-03-18T13:44:00.931Z\"\n        },\n        {\n            \"id\": \"b-123434\",\n            \"did\": \"did:12345\",\n            \"userId\": \"u-12345\",\n            \"description\": \"I am interesting in this asset\",\n            \"createdAt\": \"2022-03-18T13:44:00.931Z\"\n        }\n    ],\n    \"total_pages\": 1,\n    \"total_results\": 2    \n}"
						}
					]
				}
			]
		},
		{
			"name": "api/v1/metadata/assets",
			"item": [
				{
					"name": "Asset Controller get DDO Metadata",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e465',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e465',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/metadata/{{did}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should get a ddo\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK')",
									"        pm.expect(response.json()).to.have.property('curation');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/metadata/:did",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"metadata",
								":did"
							],
							"variable": [
								{
									"key": "did",
									"value": "{{did}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get a metadata from asset",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/metadata/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"metadata",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"curation\": {\n    \"numVotes\": 123,\n    \"rating\": 0.93,\n    \"schema\": \"Binary Voting\",\n    \"isListed\": false\n  },\n  \"main\": {\n    \"author\": \"Met Office\",\n    \"dateCreated\": \"2021-02-01T10:55:11Z\",\n    \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n    \"files\": [\n      {\n        \"contentType\": \"text/csv\",\n        \"index\": 0,\n        \"checksum\": \"efb2c764274b745f5fc37f97c6b0e761\",\n        \"url\": \"https://raw.githubusercontent.com/tbertinmahieux/MSongsDB/master/Tasks_Demos/CoverSongs/shs_dataset_test.txt\",\n        \"checksumType\": \"md5\",\n        \"name\": \"data.txt\",\n        \"compression\": \"zip\",\n        \"contentLength\": 4535431,\n        \"encoding\": \"UTF-8\",\n        \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\",\n        \"encrypted\": false,\n        \"encryptionMode\": \"gpg\"\n      },\n      {\n        \"contentType\": \"text/csv\",\n        \"index\": 0,\n        \"checksum\": \"efb2c764274b745f5fc37f97c6b0e761\",\n        \"url\": \"https://raw.githubusercontent.com/tbertinmahieux/MSongsDB/master/Tasks_Demos/CoverSongs/shs_dataset_test.txt\",\n        \"checksumType\": \"md5\",\n        \"name\": \"data.txt\",\n        \"compression\": \"zip\",\n        \"contentLength\": 4535431,\n        \"encoding\": \"UTF-8\",\n        \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\",\n        \"encrypted\": false,\n        \"encryptionMode\": \"gpg\"\n      }\n    ],\n    \"license\": 72893273.32422829,\n    \"name\": \"UK Weather information 2011\",\n    \"price\": \"10\",\n    \"type\": \"dataset\",\n    \"algorithm\": {\n      \"container\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"language\": \"scala\",\n      \"format\": \"docker-image\",\n      \"version\": \"0.1\"\n    },\n    \"datePublished\": \"2021-02-01T10:55:11Z\"\n  },\n  \"additionalInformation\": {},\n  \"serviceAgreementTemplate\": {\n    \"conditionDependency\": [\n      {\n        \"escrowPayment\": [\n          \"lockPayment\",\n          \"access\"\n        ]\n      },\n      {\n        \"escrowPayment\": [\n          \"lockPayment\",\n          \"access\"\n        ]\n      }\n    ],\n    \"conditions\": [\n      {\n        \"contractName\": \"LockPaymentCondition\",\n        \"functionName\": \"fulfill\",\n        \"name\": \"lockPayment\",\n        \"events\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ],\n        \"parameters\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ],\n        \"timelock\": 0,\n        \"timeout\": 0\n      },\n      {\n        \"contractName\": \"LockPaymentCondition\",\n        \"functionName\": \"fulfill\",\n        \"name\": \"lockPayment\",\n        \"events\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ],\n        \"parameters\": [\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          {\n            \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          }\n        ],\n        \"timelock\": 0,\n        \"timeout\": 0\n      }\n    ],\n    \"contractName\": -2630363.649898544,\n    \"events\": [\n      {\n        \"actionType\": \"publisher\",\n        \"handler\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": \"Fulfilled\"\n      },\n      {\n        \"actionType\": \"publisher\",\n        \"handler\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": \"Fulfilled\"\n      }\n    ],\n    \"fulfillmentOrder\": \"consectetur aliqua do dolor culpa\"\n  }\n}"
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/metadata/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"metadata",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Get metadata of a particular asset",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/metadata/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"metadata",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Asset Controller delete All DDOs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e460',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e460',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: 10,",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e460',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e460',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: 10,",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    }, (error, response) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"            method: 'DELETE',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"                'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"            }",
									"        }, (error, response) => {",
									"            pm.test(\"should delete all ddos\", () => {",
									"                pm.expect(response).to.have.property('code', 200);",
									"                pm.expect(response).to.have.property('status', 'OK')",
									"            });",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo"
							]
						},
						"description": "Retire metadata of all assets"
					},
					"response": [
						{
							"name": "All DDOs deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller update DDO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e449',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const assetToUpdate = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  updated: \"2020-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e449',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo/{{did}}'),",
									"        method: 'PUT',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetToUpdate)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should update a dto\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK');",
									"        pm.expect(response.json()).to.have.property('updated', '2020-02-08T08:13:49Z');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"userId\": \"{{userId}}\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo",
								":did"
							],
							"variable": [
								{
									"key": "did",
									"value": "{{did}}"
								}
							]
						},
						"description": "Update DDO of an existing asset"
					},
					"response": [
						{
							"name": "Updated DDO",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": 10,\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"created\": \"2021-02-01T10:55:11Z\",\n  \"updated\": \"2021-02-01T10:55:11Z\",\n  \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller delete DDO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e457',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e457',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e458',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e458',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    }, (error, response) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo/{{did}}'),",
									"            method: 'DELETE',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"                'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"            }",
									"        }, (error, response) => {",
									"            pm.test(\"should delete a ddo\", () => {",
									"                pm.expect(response).to.have.property('code', 200);",
									"                pm.expect(response).to.have.property('status', 'OK')",
									"            });",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo",
								":did"
							],
							"variable": [
								{
									"key": "did",
									"value": "{{did}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Deleted DDO",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:{{did}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":{{did}}"
									],
									"variable": [
										{
											"key": "{{did}}",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:{{did}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":{{did}}"
									],
									"variable": [
										{
											"key": "{{did}}",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller list DDO by Query Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e472',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e472',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const query = {",
									"  \"query\": {",
									"    \"match_all\": {}",
									"  },",
									"  \"offset\": \"100\",",
									"  \"page\": \"1\",",
									"  \"sort\": {",
									"    \"created\": \"asc\"",
									"  }",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo/query'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(query)",
									"        }",
									"",
									"}, (error, response) => {",
									"    pm.test(\"should get a list of ddos by passing a query\", () => {",
									"        pm.expect(response).to.have.property('code', 201);",
									"        pm.expect(response).to.have.property('status', 'Created')",
									"        pm.expect(response.json().results.some(r => r.id === pm.environment.get(\"did\"))).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"offset\": \"100\",\n  \"page\": \"1\",\n  \"sort\": {\n    \"created\": \"asc\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/query",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo",
								"query"
							]
						},
						"description": "Get a list of DDOs that match with the executed query."
					},
					"response": [
						{
							"name": "List DDOs",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"text\": \"Eius vel alias.\",\n  \"offset\": \"100\",\n  \"page\": \"1\",\n  \"sort\": {\n    \"created\": \"asc\"\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/query",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										"query"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"results\": [\n        {\n            \"@context\": \"https://w3id.org/did/v1\",\n            \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n            \"authentication\": [\n            {\n                \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n                \"type\": \"RsaSignatureAuthentication2018\"\n            }\n            ],\n            \"created\": \"2021-02-01T10:55:11Z\",\n            \"updated\": \"2021-02-01T10:55:11Z\",\n            \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n            \"proof\": {\n            \"created\": \"2022-01-08T16:02:20Z\",\n            \"creator\": \"2022-01-08T16:02:20Z\",\n            \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n            \"type\": \"DDOIntegritySignature\"\n            },\n            \"publicKey\": [\n            {\n                \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n                \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n                \"type\": \"EthereumECDSAKey\"\n            }\n            ],\n            \"service\": [\n            {\n                \"index\": 0,\n                \"service\": \"SecretStore\",\n                \"serviceEndpoint\": \"http://localhost:12001\",\n                \"type\": \"authorization\"\n            },\n            {\n                \"index\": 1,\n                \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n                \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n                \"type\": \"access\"\n            },\n            {\n                \"attributes\": {\n                \"additionalInformation\": {\n                    \"copyrightHolder\": \"Met Office\",\n                    \"description\": \"Weather information of UK including temperature and humidity\",\n                    \"inLanguage\": \"en\",\n                    \"links\": [\n                    {\n                        \"name\": \"Sample of Asset Data\",\n                        \"type\": \"sample\",\n                        \"url\": \"https://foo.com/sample.csv\"\n                    }\n                    ],\n                    \"tags\": [\n                    \"weather\",\n                    \"uk\",\n                    \"2011\",\n                    \"temperature\",\n                    \"humidity\"\n                    ],\n                    \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n                },\n                \"curation\": {\n                    \"numVotes\": 123,\n                    \"rating\": 0.93,\n                    \"schema\": \"Binary Voting\"\n                },\n                \"main\": {\n                    \"author\": \"Met Office\",\n                    \"dateCreated\": \"2012-02-01T10:55:11Z\",\n                    \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n                    \"files\": [\n                    {\n                        \"compression\": \"zip\",\n                        \"contentLength\": \"4535431\",\n                        \"contentType\": \"text/csv\",\n                        \"encoding\": \"UTF-8\",\n                        \"index\": 0,\n                        \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                    }\n                    ],\n                    \"license\": \"CC-BY\",\n                    \"name\": \"UK Weather information 2011\",\n                    \"price\": \"10\",\n                    \"type\": \"dataset\"\n                }\n                },\n                \"index\": 2,\n                \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n                \"type\": \"metadata\"\n            }\n            ]\n        }\n    ],\n    \"total_pages\": 1,\n    \"total_results\": 1,\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"text\": \"Eius vel alias.\",\n  \"offset\": \"100\",\n  \"page\": \"1\",\n  \"sort\": {\n    \"created\": \"asc\"\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/query",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										"query"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller create Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"const assetRatingNotValid = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 2,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"const assetAccess = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  created: '2020-09-03T13:31:02Z',",
									"  id: 'did:nv:3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"  proof: {",
									"    checksum: {",
									"      '0': 'e8cf331dc623f4c470698fea8eec786f5e77850e9b5119bbe1eef3f1fc3fa8a5',",
									"      '1': 'e4ac07c241b4a113e1ad6ef046b8fdf61c5e2c6e6a1745d352f8f30ffa84d704',",
									"      '2': 'f6c642676664b242efb5417d49728fb05a8ca998494156409c66dafcdbbb2a2a',",
									"      '3': '9f2faa3d43dc5a1b093911125678a77b2d1dbd78746a2ba277f25b9695eb4ebd',",
									"    },",
									"    created: '2020-09-03T13:31:02Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xe9e3bf87a7659c7eaa1b1ee0c140abd9faeba3543f9943c836fbbbc4088609c74b8' +",
									"      '9e9db74e164797361e708090e85e351809539f528451b5b672e3ab8b40f0b1b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"      owner: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"            {",
									"              name: 'Data Format Definition',",
									"              type: 'format',",
									"              url: 'https://foo.com/sampl2.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample: '423432fsd,51.509865,-0.118092,2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          rating: 0,",
									"          numVotes: 0,",
									"          isListed: true,",
									"        },",
									"        encryptedFiles:",
									"          '0x754c42427249666b6774504a6f4a317a314a4a5576394956472b572b6e4e5346785632416545597' +",
									"          'a4d52797937376e4b633065416255512f4f6c43307465654d617a795731326f486f77614758363357' +",
									"          '30736170716e656b6f557453373939452f784352306e376652566c4853726339384e42596e5245546' +",
									"          '2726561586379734f3571764a4661786d364a42596944645269794b4b51717865374f3978554c7734' +",
									"          '6753675475504e73345269377a6a657968354d50666e4f39725554527a57582f4370644e454233534' +",
									"          'a415a737a35366a72735869704f597a594476765855645536386a6457746d576c52684e654f4a486b' +",
									"          '664978545767324b6d774b535242775a746a4f355371354e75486848614c666c4b394c6555644d535' +",
									"          '87743435154665032435466314a5171783956506e78325646325152346c752b6a4368665533703231' +",
									"          '593875536370785a4c366536474152766d4562737a614f7a71386c6869726f6a3662797a714e75317' +",
									"          '4726b322b76766e70494262695630416e2b615832|0x7c44d4bb6169f6eee3686135fbe2d00947b01' +",
									"          '0dd1763ca963899c7f418713c7c8b003e3e38d07090a2f551dab568a08121754d32a751c0b6bf7bc8' +",
									"          'c0e561589353ab728a670271cb4a6d1912beb876044a6e343bc65af4ddc30af9f71eb236990299634' +",
									"          'b6680b84d3b90efe962825ae72b809c02464bb23799b8cd12ad90d235',",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2020-09-03T13:31:01Z',",
									"          datePublished: '2019-02-08T08:13:49Z',",
									"          files: [",
									"            {",
									"              url:",
									"                'https://raw.githubusercontent.com/tbertinmahieux/MSongsDB/' +",
									"                'master/Tasks_Demos/CoverSongs/shs_dataset_test.txt',",
									"              checksum: 'efb2c764274b745f5fc37f97c6b0e761',",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '1',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 0,",
									"      serviceEndpoint:",
									"        'http://172.15.0.15:5000/api/v1/metadata/assets/ddo/' +",
									"        'did:nv:3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"      immutableServiceEndpoint: 'cid://QmVT3wfySvZJqAvkBCyxoz3EvD3yeLqf3cvAssFDpFFXNm',",
									"      type: 'metadata',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          files: [],",
									"          service: 'provenance',",
									"        },",
									"      },",
									"      index: 1,",
									"      serviceEndpoint:",
									"        'http://172.15.0.15:5000/api/v1/metadata/assets/ddo/' +",
									"        'did:nv:3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"      type: 'provenance',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          files: [],",
									"          publicKey:",
									"            'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC2qIisJyMd6YXJNzs23zKLajtPC7w6aO9mXq+' +",
									"            'Ukr6d3cVmPCx8XJRTT3IV7PmHb3o4XFc8ZGX5/SSg7tp5/cfAIg9XF13yjssJttaDTa4srhLJvx' +",
									"            'yjR8cHEJ39GevFTgrtbYzXTZ723ROJP4NEDxtp8a0f5l7W3NTH8v39k3G50QIDAQAB',",
									"          service: 'PSK-RSA',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint: 'http://localhost:8030',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"          datePublished: '2020-09-03T13:31:02Z',",
									"          files: [],",
									"          name: 'dataAssetAccessServiceAgreement',",
									"          price: '1',",
									"        },",
									"        serviceAgreementTemplate: {",
									"          conditionDependency: {",
									"            access: [],",
									"            escrowPayment: ['lockPayment', 'access'],",
									"            execCompute: [],",
									"            lockPayment: [],",
									"          },",
									"          conditions: [",
									"            {",
									"              contractName: 'LockPaymentCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'fulfillAccessCondition',",
									"                    moduleName: 'lockPaymentConditon',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'lockPayment',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_rewardAddress',",
									"                  type: 'address',",
									"                  value: '0x886dE2b3F8F27eEd43bA2FD4bC2AabDc14E0d9dD',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"            {",
									"              contractName: 'AccessCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    moduleName: 'access',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"                {",
									"                  actorType: 'consumer',",
									"                  handler: {",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    moduleName: 'access',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'TimedOut',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'access',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"                },",
									"                {",
									"                  name: '_grantee',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"            {",
									"              contractName: 'EscrowPaymentCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'verifyRewardTokens',",
									"                    moduleName: 'escrowPaymentConditon',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'escrowPayment',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"                {",
									"                  name: '_sender',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_lockCondition',",
									"                  type: 'bytes32',",
									"                  value: '0xBDB91cF0a8449a2848Ba6194eE45579E81B1A0F9',",
									"                },",
									"                {",
									"                  name: '_releaseCondition',",
									"                  type: 'bytes32',",
									"                  value: '0xFF3a12191A703939b1466eC1Fc7679AbbFf88545',",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"          ],",
									"          contractName: 'EscrowAccessSecretStoreTemplate',",
									"          events: [",
									"            {",
									"              actorType: 'consumer',",
									"              handler: {",
									"                functionName: 'fulfillLockPaymentCondition',",
									"                moduleName: 'escrowAccessSecretStoreTemplate',",
									"                version: '0.1',",
									"              },",
									"              name: 'AgreementCreated',",
									"            },",
									"          ],",
									"          fulfillmentOrder: ['lockPayment.fulfill', 'access.fulfill', 'escrowPayment.fulfill'],",
									"        },",
									"      },",
									"      index: 3,",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/access',",
									"      templateId: '0xB4d05b7D929dD241b79e06FF1AeA033159693931',",
									"      type: 'access',",
									"    },",
									"  ],",
									"  updated: '2020-09-03T13:31:02Z',",
									"};",
									"",
									"const assetAlgorithm = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  authentication: [",
									"    {",
									"      type: 'RsaSignatureAuthentication2018',",
									"      publicKey: 'did:nv:0ebed8226ada17fde24b6bf2b95d27f8f05fcce09139ff5cec31f6d81a7cd2ea',",
									"    },",
									"  ],",
									"  created: '2019-02-08T08:13:49Z',",
									"  id: 'did:nv:0bc278fee025464f8012b811d1bce8e22094d0984e4e49139df5d5ff7a028btr',",
									"  proof: {",
									"    created: '2019-02-08T08:13:41Z',",
									"    creator: '0x37BB53e3d293494DE59fBe1FF78500423dcFd43B',",
									"    signatureValue: 'did:nv:0bc278fee025464f8012b811d1bce8e22094d0984e4e49139df5d5ff7a028btr',",
									"    type: 'DDOIntegritySignature',",
									"    checksum: {",
									"      '0': '0x52b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3bbc3377',",
									"      '1': '0x999999952b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3',",
									"      '2': 'f6c642676664b242efb5417d49728fb05a8ca998494156409c66dafcdbbb2a2a',",
									"      '3': '9f2faa3d43dc5a1b093911125678a77b2d1dbd78746a2ba277f25b9695eb4ebd',",
									"    },",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-1',",
									"      type: 'RsaVerificationKey2018',",
									"      owner: 'did:nv:6027c1e7cbae06a91fce0557ee53195284825f56a7100be0c53cbf4391aa26cc',",
									"      publicKeyPem: '-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n',",
									"    },",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-2',",
									"      type: 'Ed25519VerificationKey2018',",
									"      owner: 'did:nv:4c27a254e607cdf91a1206480e7eb8c74856102316c1a462277d4f21c02373b6',",
									"      publicKeyBase58: 'H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV',",
									"    },",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-3',",
									"      type: 'RsaPublicKeyExchangeKey2018',",
									"      owner: 'did:nv:5f6b885202ffb9643874be529302eb00d55e226959f1fbacaeda592c5b5c9484',",
									"      publicKeyPem: '-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n',",
									"    },",
									"  ],",
									"  verifiableCredential: [",
									"    {",
									"      '@context': ['https://www.w3.org/2018/credentials/v1', 'https://www.w3.org/2018/credentials/examples/v1'],",
									"      id: '1872',",
									"      type: ['read', 'update', 'deactivate'],",
									"      issuer: '0x610D9314EDF2ced7681BA1633C33fdb8cF365a12',",
									"      issuanceDate: '2019-01-01T19:73:24Z',",
									"      credentialSubject: {",
									"        id: '0x89328493849328493284932',",
									"      },",
									"      proof: {",
									"        type: 'RsaSignature2018',",
									"        created: '2019-01-01T19:73:24Z',",
									"        proofPurpose: 'assertionMethod',",
									"        signatureValue: 'ABCJSDAO23...1tzjn4w==',",
									"      },",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      serviceEndpoint: 'http://localhost:5000/api/v1/metadata/assets/ddo/{did}',",
									"      immutableServiceEndpoint: 'cid://QmVT3wfySvZJqAvkBCyxoz3EvD3yeLqf3cvAssFDpFFXNm',",
									"      type: 'metadata',",
									"      attributes: {",
									"        main: {",
									"          author: 'John Doe',",
									"          checksum: '0x52b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3bbc3377',",
									"          dateCreated: '2019-02-08T08:13:49Z',",
									"          license: 'CC-BY',",
									"          name: 'Word count script',",
									"          price: '0',",
									"          files: [",
									"            {",
									"              index: 0,",
									"              contentType: 'text/text',",
									"              checksum: '52b5c93b82dd9e7ecc3d9fdf4755f7f69a544',",
									"              checksumType: 'MD5',",
									"              contentLength: '12057507',",
									"              url:",
									"                'https://raw.githubusercontent.com/nevermined-io/nevermined-docs/' +",
									"                'a46795b19ba61b240ff9dd403d88b069c0b51592/resources/word_count.py',",
									"            },",
									"          ],",
									"          type: 'algorithm',",
									"          algorithm: {",
									"            language: 'python',",
									"            format: 'py',",
									"            version: '0.1',",
									"            entrypoint: 'python word_count.py*',",
									"            requirements: {",
									"              container: {",
									"                image: 'python',",
									"                tag: '3.8-alpine',",
									"                checksum: 'sha256:53ad3a03b2fb240b6c494339821e6638cd44c989bcf26ec4d51a6a52f7518c1d',",
									"              },",
									"            },",
									"          },",
									"        },",
									"        additionalInformation: {",
									"          description: 'script to calculate word count',",
									"          tags: ['word', 'count', 'python', 'workflow', 'aggregation'],",
									"          copyrightHolder: 'John Doe',",
									"        },",
									"      },",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          files: [],",
									"          service: 'provenance',",
									"        },",
									"      },",
									"      index: 1,",
									"      serviceEndpoint:",
									"        'http://172.15.0.15:5000/api/v1/metadata/assets/ddo/' +",
									"        'did:nv:3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"      type: 'provenance',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          files: [],",
									"          publicKey:",
									"            'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC2qIisJyMd6YXJNzs23zKLajtPC7w6aO9mXq+Ukr6d3c' +",
									"            'VmPCx8XJRTT3IV7PmHb3o4XFc8ZGX5/SSg7tp5/cfAIg9XF13yjssJttaDTa4srhLJvxyjR8cHEJ39GevF' +",
									"            'TgrtbYzXTZ723ROJP4NEDxtp8a0f5l7W3NTH8v39k3G50QIDAQAB',",
									"          service: 'PSK-RSA',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint: 'http://localhost:8030',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"          datePublished: '2020-09-03T13:31:02Z',",
									"          files: [],",
									"          name: 'dataAssetAccessServiceAgreement',",
									"          price: '1',",
									"        },",
									"        serviceAgreementTemplate: {",
									"          conditionDependency: {",
									"            access: [],",
									"            escrowPayment: ['lockPayment', 'access'],",
									"            execCompute: [],",
									"            lockPayment: [],",
									"          },",
									"          conditions: [",
									"            {",
									"              contractName: 'LockPaymentCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'fulfillAccessCondition',",
									"                    moduleName: 'lockPaymentConditon',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'lockPayment',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_rewardAddress',",
									"                  type: 'address',",
									"                  value: '0x886dE2b3F8F27eEd43bA2FD4bC2AabDc14E0d9dD',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"            {",
									"              contractName: 'AccessCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    moduleName: 'access',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"                {",
									"                  actorType: 'consumer',",
									"                  handler: {",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    moduleName: 'access',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'TimedOut',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'access',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '3b5607872397a527cd69e41743b07ddbeeb8aa865f3decd1fab4be679e6c6eef',",
									"                },",
									"                {",
									"                  name: '_grantee',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"            {",
									"              contractName: 'EscrowPaymentCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'verifyRewardTokens',",
									"                    moduleName: 'escrowPaymentConditon',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'escrowPayment',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"                {",
									"                  name: '_sender',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_lockCondition',",
									"                  type: 'bytes32',",
									"                  value: '0xBDB91cF0a8449a2848Ba6194eE45579E81B1A0F9',",
									"                },",
									"                {",
									"                  name: '_releaseCondition',",
									"                  type: 'bytes32',",
									"                  value: '0xFF3a12191A703939b1466eC1Fc7679AbbFf88545',",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"          ],",
									"          contractName: 'EscrowAccessSecretStoreTemplate',",
									"          events: [",
									"            {",
									"              actorType: 'consumer',",
									"              handler: {",
									"                functionName: 'fulfillLockPaymentCondition',",
									"                moduleName: 'escrowAccessSecretStoreTemplate',",
									"                version: '0.1',",
									"              },",
									"              name: 'AgreementCreated',",
									"            },",
									"          ],",
									"          fulfillmentOrder: ['lockPayment.fulfill', 'access.fulfill', 'escrowPayment.fulfill'],",
									"        },",
									"      },",
									"      index: 3,",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/access',",
									"      templateId: '0xB4d05b7D929dD241b79e06FF1AeA033159693931',",
									"      type: 'access',",
									"    },",
									"  ],",
									"};",
									"",
									"const assetCompute = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:d4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  created: '2020-09-03T13:35:42',",
									"  id: 'did:nv:d4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"  proof: {",
									"    checksum: {",
									"      '0': 'ca56bda3bb55eeae32ff918b32143333930ca71a0bb3f1c4973a7da4e71abe6e',",
									"      '1': 'e4ac07c241b4a113e1ad6ef046b8fdf61c5e2c6e6a1745d352f8f30ffa84d704',",
									"      '2': 'f6c642676664b242efb5417d49728fb05a8ca998494156409c66dafcdbbb2a2a',",
									"      '4': '55ddd337fc6625b83c57955200e2ad9cc15f8a14676b0b27965acc7a8c420cf5',",
									"    },",
									"    created: '2020-09-03T13:35:42Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0x9e16ce1055ea63249112ae61eec03ae653541f037d15fb491f938a0fcbd0a5ed' +",
									"      '686332a9a32dd020088750b01d6ec1a3969e6cccde6c0ceeeb338f44ea0238351b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"      owner: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"            {",
									"              name: 'Data Format Definition',",
									"              type: 'format',",
									"              url: 'https://foo.com/sampl2.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample: '423432fsd,51.509865,-0.118092,2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          rating: 0,",
									"          numVotes: 0,",
									"          isListed: true,",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2020-09-03T13:35:42',",
									"          datePublished: '2019-02-08T08:13:49Z',",
									"          files: [",
									"            {",
									"              checksum: 'efb2c764274b745f5fc37f97c6b0e761',",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '1',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 0,",
									"      serviceEndpoint:",
									"        'http://172.15.0.15:5000/api/v1/metadata/assets/ddo/' +",
									"        'did:nv:d4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"      immutableServiceEndpoint: 'cid://QmVT3wfySvZJqAvkBCyxoz3EvD3yeLqf3cvAssFDpFFXNm',",
									"      type: 'metadata',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          files: [],",
									"          service: 'provenance',",
									"        },",
									"      },",
									"      index: 1,",
									"      serviceEndpoint:",
									"        'http://172.15.0.15:5000/api/v1/metadata/assets/ddo/' +",
									"        'did:nv:d4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"      type: 'provenance',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          files: [],",
									"          service: 'PSK-RSA',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint: 'http://localhost:8030',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          links: [],",
									"        },",
									"        main: {",
									"          creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"          datePublished: '2020-09-03T13:35:42Z',",
									"          files: [],",
									"          name: 'dataAssetComputeServiceAgreement',",
									"          price: '1',",
									"          provider: {",
									"            description: '',",
									"            environment: {",
									"              cluster: {",
									"                type: 'Kubernetes',",
									"                url: 'http://10.0.0.17/xxx',",
									"              },",
									"              supportedContainers: [",
									"                {",
									"                  checksum: 'sha256:cb57ecfa6ebbefd8ffc7f75c0f00e57a7fa739578a429b6f72a0df19315deadc',",
									"                  image: 'tensorflow/tensorflow',",
									"                  tag: 'latest',",
									"                },",
									"                {",
									"                  checksum: 'sha256:cb57ecfa6ebbefd8ffc7f75c0f00e57a7fa739578a429b6f72a0df19315deadc',",
									"                  image: 'tensorflow/tensorflow',",
									"                  tag: 'latest',",
									"                },",
									"              ],",
									"              supportedServers: [",
									"                {",
									"                  cpu: '16',",
									"                  disk: '160gb',",
									"                  gpu: '0',",
									"                  maxExecutionTime: 86400,",
									"                  memory: '128gb',",
									"                  price: '50',",
									"                  serverId: '1',",
									"                  serverType: 'xlsize',",
									"                },",
									"                {",
									"                  cpu: '2',",
									"                  disk: '80gb',",
									"                  gpu: '0',",
									"                  maxExecutionTime: 86400,",
									"                  memory: '8gb',",
									"                  price: '10',",
									"                  serverId: '2',",
									"                  serverType: 'medium',",
									"                },",
									"              ],",
									"            },",
									"            type: 'Azure',",
									"          },",
									"        },",
									"        serviceAgreementTemplate: {",
									"          conditionDependency: {",
									"            access: [],",
									"            escrowPayment: ['lockPayment', 'execCompute'],",
									"            execCompute: [],",
									"            lockPayment: [],",
									"          },",
									"          conditions: [",
									"            {",
									"              contractName: 'LockPaymentCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'fulfillExecComputeCondition',",
									"                    moduleName: 'lockPaymentConditon',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'lockPayment',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: 'd4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"                },",
									"                {",
									"                  name: '_rewardAddress',",
									"                  type: 'address',",
									"                  value: '0x886dE2b3F8F27eEd43bA2FD4bC2AabDc14E0d9dD',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"            {",
									"              contractName: 'ComputeExecutionCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    moduleName: 'access',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"                {",
									"                  actorType: 'consumer',",
									"                  handler: {",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    moduleName: 'execCompute',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'TimedOut',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'execCompute',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: 'd4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"                },",
									"                {",
									"                  name: '_grantee',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"            {",
									"              contractName: 'EscrowPaymentCondition',",
									"              events: [",
									"                {",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    functionName: 'verifyRewardTokens',",
									"                    moduleName: 'escrowPaymentConditon',",
									"                    version: '0.1',",
									"                  },",
									"                  name: 'Fulfilled',",
									"                },",
									"              ],",
									"              functionName: 'fulfill',",
									"              name: 'escrowPayment',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: 'd4c7a013002adfe2cedda8ff771c41f571dfe8a6d1a8d28d30933d5a81ad7794',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"                {",
									"                  name: '_sender',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_lockCondition',",
									"                  type: 'bytes32',",
									"                  value: '0xBDB91cF0a8449a2848Ba6194eE45579E81B1A0F9',",
									"                },",
									"                {",
									"                  name: '_releaseCondition',",
									"                  type: 'bytes32',",
									"                  value: '0xF673Cd200CEa6FAB788979BD475cC595d5894767',",
									"                },",
									"              ],",
									"              timelock: 0,",
									"              timeout: 0,",
									"            },",
									"          ],",
									"          contractName: 'EscrowComputeExecutionTemplate',",
									"          events: [",
									"            {",
									"              actorType: 'consumer',",
									"              handler: {",
									"                functionName: 'fulfillLockPaymentCondition',",
									"                moduleName: 'EscrowComputeExecutionTemplate',",
									"                version: '0.1',",
									"              },",
									"              name: 'AgreementCreated',",
									"            },",
									"          ],",
									"          fulfillmentOrder: ['lockPayment.fulfill', 'execCompute.fulfill', 'escrowPayment.fulfill'],",
									"        },",
									"      },",
									"      index: 4,",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/execute',",
									"      templateId: '0xcD6318Df0dB24E994783bFF2AB73d81F1533c499',",
									"      type: 'compute',",
									"    },",
									"  ],",
									"  updated: '2020-09-03T13:35:42Z',",
									"};",
									"",
									"const assetService = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  authentication: [",
									"    {",
									"      type: 'RsaSignatureAuthentication2018',",
									"      publicKey: 'did:nv:0ebed8226ada17fde24b6bf2b95d27f8f05fcce09139ff5cec31f6d81a7cd2ea',",
									"    },",
									"  ],",
									"  created: '2019-02-08T08:13:49Z',",
									"  id: 'did:nv:0bc278fee025464f8012b811d1bce8e22094d0984e4e49139df5d5ff7a028brd',",
									"  proof: {",
									"    created: '2019-02-08T08:13:41Z',",
									"    creator: '0x37BB53e3d293494DE59fBe1FF78500423dcFd43B',",
									"    signatureValue: 'did:nv:0bc278fee025464f8012b811d1bce8e22094d0984e4e49139df5d5ff7a028brd',",
									"    type: 'DDOIntegritySignature',",
									"    checksum: {",
									"      '0': '0x52b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3bbc3377',",
									"      '1': '0x999999952b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3',",
									"    },",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-1',",
									"      type: 'RsaVerificationKey2018',",
									"      owner: 'did:nv:6027c1e7cbae06a91fce0557ee53195284825f56a7100be0c53cbf4391aa26cc',",
									"      publicKeyPem: '-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n',",
									"    },",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-2',",
									"      type: 'Ed25519VerificationKey2018',",
									"      owner: 'did:nv:4c27a254e607cdf91a1206480e7eb8c74856102316c1a462277d4f21c02373b6',",
									"      publicKeyBase58: 'H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV',",
									"    },",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-3',",
									"      type: 'RsaPublicKeyExchangeKey2018',",
									"      owner: 'did:nv:5f6b885202ffb9643874be529302eb00d55e226959f1fbacaeda592c5b5c9484',",
									"      publicKeyPem: '-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n',",
									"    },",
									"  ],",
									"  verifiableCredential: [",
									"    {",
									"      '@context': ['https://www.w3.org/2018/credentials/v1', 'https://www.w3.org/2018/credentials/examples/v1'],",
									"      id: '1872',",
									"      type: ['read', 'update', 'deactivate'],",
									"      issuer: '0x610D9314EDF2ced7681BA1633C33fdb8cF365a12',",
									"      issuanceDate: '2019-01-01T19:73:24Z',",
									"      credentialSubject: {",
									"        id: '0x89328493849328493284932',",
									"      },",
									"      proof: {",
									"        type: 'RsaSignature2018',",
									"        created: '2019-01-01T19:73:24Z',",
									"        proofPurpose: 'assertionMethod',",
									"        signatureValue: 'ABCJSDAO23...1tzjn4w==',",
									"      },",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      serviceEndpoint: 'http://localhost:5000/api/v1/metadata/assets/ddo/{did}',",
									"      immutableServiceEndpoint: 'cid://QmVT3wfySvZJqAvkBCyxoz3EvD3yeLqf3cvAssFDpFFXNm',",
									"      type: 'metadata',",
									"      attributes: {",
									"        main: {",
									"          author: 'Met Office',",
									"          checksum: '0x52b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3bbc3377',",
									"          dateCreated: '2019-02-08T08:13:49Z',",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '1',",
									"          type: 'service',",
									"          spec: 'https://my.service.inet:8080/spec',",
									"          specChecksum: '859486596784567856758aaaa',",
									"          definition: {",
									"            auth: {",
									"              type: 'basic',",
									"              user: 'aitor',",
									"              password: '1234',",
									"              token: '89c06eb5a88f4bbbf4ac966d737593b36e61e885',",
									"            },",
									"            endpoints: [",
									"              {",
									"                index: 0,",
									"                url: 'https://my.service.inet:8080/api/v1/weather',",
									"                method: 'POST',",
									"                contentTypes: ['application/json'],",
									"              },",
									"            ],",
									"          },",
									"        },",
									"",
									"        additionalInformation: {",
									"          description: 'Weather Service',",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          copyrightHolder: 'Met Office',",
									"        },",
									"      },",
									"    },",
									"    {",
									"      type: 'access',",
									"      index: 1,",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      templateId: '0x044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d',",
									"      attributes: {",
									"        main: {",
									"          purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"          name: 'dataAssetAccessServiceAgreement',",
									"          creator: '',",
									"          datePublished: '2019-02-08T08:13:49Z',",
									"          price: '10',",
									"          timeout: 36000,",
									"        },",
									"        additionalInformation: {",
									"          description: '',",
									"        },",
									"        serviceAgreementTemplate: {",
									"          contractName: 'EscrowAccessSecretStoreTemplate',",
									"          events: [",
									"            {",
									"              name: 'AgreementCreated',",
									"              actorType: 'consumer',",
									"              handler: {",
									"                moduleName: 'escrowAccessSecretStoreTemplate',",
									"                functionName: 'fulfillLockPaymentCondition',",
									"                version: '0.1',",
									"              },",
									"            },",
									"          ],",
									"          fulfillmentOrder: ['lockPayment.fulfill', 'access.fulfill', 'escrowPayment.fulfill'],",
									"          conditionDependency: {",
									"            lockPayment: [],",
									"            grantSecretStoreAccess: [],",
									"            releaseReward: ['lockPayment', 'access'],",
									"          },",
									"          conditions: [",
									"            {",
									"              name: 'lockPayment',",
									"              timelock: 0,",
									"              timeout: 0,",
									"              contractName: 'LockPaymentCondition',",
									"              functionName: 'fulfill',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_rewardAddress',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"              ],",
									"              events: [",
									"                {",
									"                  name: 'Fulfilled',",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    moduleName: 'lockPaymentConditon',",
									"                    functionName: 'fulfillAccessCondition',",
									"                    version: '0.1',",
									"                  },",
									"                },",
									"              ],",
									"            },",
									"            {",
									"              name: 'access',",
									"              timelock: 0,",
									"              timeout: 0,",
									"              contractName: 'AccessCondition',",
									"              functionName: 'fulfill',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_grantee',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"              ],",
									"              events: [",
									"                {",
									"                  name: 'Fulfilled',",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    moduleName: 'access',",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    version: '0.1',",
									"                  },",
									"                },",
									"                {",
									"                  name: 'TimedOut',",
									"                  actorType: 'consumer',",
									"                  handler: {",
									"                    moduleName: 'access',",
									"                    functionName: 'fulfillEscrowPaymentCondition',",
									"                    version: '0.1',",
									"                  },",
									"                },",
									"              ],",
									"            },",
									"            {",
									"              name: 'escrowPayment',",
									"              timelock: 0,",
									"              timeout: 0,",
									"              contractName: 'EscrowPaymentCondition',",
									"              functionName: 'fulfill',",
									"              parameters: [",
									"                {",
									"                  name: '_did',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_amounts',",
									"                  type: 'uint256[]',",
									"                  value: ['10', '2'],",
									"                },",
									"                {",
									"                  name: '_receivers',",
									"                  type: 'address[]',",
									"                  value: ['0xa99d43d86a0758d5632313b8fa3972b6088a21bb', '0x068ed00cf0441e4829d9784fcbe7b9e26d4bd8d0'],",
									"                },",
									"                {",
									"                  name: '_sender',",
									"                  type: 'address',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_tokenAddress',",
									"                  type: 'address',",
									"                  value: '0x0',",
									"                },",
									"                {",
									"                  name: '_lockCondition',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"                {",
									"                  name: '_releaseCondition',",
									"                  type: 'bytes32',",
									"                  value: '',",
									"                },",
									"              ],",
									"              events: [",
									"                {",
									"                  name: 'Fulfilled',",
									"                  actorType: 'publisher',",
									"                  handler: {",
									"                    moduleName: 'escrowPaymentConditon',",
									"                    functionName: 'verifyRewardTokens',",
									"                    version: '0.1',",
									"                  },",
									"                },",
									"              ],",
									"            },",
									"          ],",
									"        },",
									"      },",
									"    },",
									"  ],",
									"};",
									"",
									"const assetWorkflow = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  authentication: [",
									"    {",
									"      type: 'RsaSignatureAuthentication2018',",
									"      publicKey: 'did:nv:0ebed8226ada17fde24b6bf2b95d27f8f05fcce09139ff5cec31f6d81a7cd2ea',",
									"    },",
									"  ],",
									"  created: '2019-02-08T08:13:49Z',",
									"  updated: '2019-06-30T14:53:09Z',",
									"  id: 'did:nv:0bc278fee025464f8012b811d1bce8e22094d0984e4e49139df5d5ff7a028bdf',",
									"  proof: {",
									"    created: '2019-02-08T08:13:41Z',",
									"    creator: '0x37BB53e3d293494DE59fBe1FF78500423dcFd43B',",
									"    signatureValue: 'did:nv:0bc278fee025464f8012b811d1bce8e22094d0984e4e49139df5d5ff7a028bdf',",
									"    type: 'DDOIntegritySignature',",
									"    checksum: {",
									"      '0': '0x52b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3bbc3377',",
									"    },",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-1',",
									"      type: 'RsaVerificationKey2018',",
									"      owner: 'did:nv:6027c1e7cbae06a91fce0557ee53195284825f56a7100be0c53cbf4391aa26cc',",
									"      publicKeyPem: '-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n',",
									"    },",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-2',",
									"      type: 'Ed25519VerificationKey2018',",
									"      owner: 'did:nv:4c27a254e607cdf91a1206480e7eb8c74856102316c1a462277d4f21c02373b6',",
									"      publicKeyBase58: 'H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV',",
									"    },",
									"    {",
									"      id: 'did:nv:b6e2eb5eff1a093ced9826315d5a4ef6c5b5c8bd3c49890ee284231d7e1d0aaa#keys-3',",
									"      type: 'RsaPublicKeyExchangeKey2018',",
									"      owner: 'did:nv:5f6b885202ffb9643874be529302eb00d55e226959f1fbacaeda592c5b5c9484',",
									"      publicKeyPem: '-----BEGIN PUBLIC KEY...END PUBLIC KEY-----\\r\\n',",
									"    },",
									"  ],",
									"  verifiableCredential: [",
									"    {",
									"      '@context': ['https://www.w3.org/2018/credentials/v1', 'https://www.w3.org/2018/credentials/examples/v1'],",
									"      id: '1872',",
									"      type: ['read', 'update', 'deactivate'],",
									"      issuer: '0x610D9314EDF2ced7681BA1633C33fdb8cF365a12',",
									"      issuanceDate: '2019-01-01T19:73:24Z',",
									"      credentialSubject: {",
									"        id: '0x89328493849328493284932',",
									"      },",
									"      proof: {",
									"        type: 'RsaSignature2018',",
									"        created: '2019-01-01T19:73:24Z',",
									"        proofPurpose: 'assertionMethod',",
									"        signatureValue: 'ABCJSDAO23...1tzjn4w==',",
									"      },",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      serviceEndpoint: 'http://localhost:5000/api/v1/metadata/assets/ddo/{did}',",
									"      type: 'metadata',",
									"      attributes: {",
									"        main: {",
									"          author: 'John Doe',",
									"          checksum: '0x52b5c93b82dd9e7ecc3d9fdf4755f7f69a54484941897dc517b4adfe3bbc3377',",
									"          dateCreated: '2019-02-08T08:13:49Z',",
									"          datePublished: '2019-05-08T08:13:49Z',",
									"          license: 'CC-BY',",
									"          name: 'My workflow',",
									"          price: '1',",
									"          type: 'workflow',",
									"          workflow: {",
									"            stages: [",
									"              {",
									"                index: 0,",
									"                stageType: 'Filtering',",
									"                requirements: {",
									"                  container: {",
									"                    image: 'tensorflow/tensorflow',",
									"                    tag: 'latest',",
									"                    checksum: 'sha256:cb57ecfa6ebbefd8ffc7f75c0f00e57a7fa739578a429b6f72a0df19315deadc',",
									"                  },",
									"                },",
									"                input: [",
									"                  {",
									"                    index: 0,",
									"                    id: 'did:nv:12345',",
									"                  },",
									"                  {",
									"                    index: 1,",
									"                    id: 'did:nv:67890',",
									"                  },",
									"                ],",
									"                transformation: {",
									"                  id: 'did:nv:abcde',",
									"                },",
									"                output: {",
									"                  metadataUrl: 'https://localhost:5000/api/v1/metadata/assets/ddo/',",
									"                  secretStoreUrl: 'http://localhost:12001',",
									"                  accessProxyUrl: 'https://localhost:8030/api/v1/gateway/',",
									"                  metadata: {},",
									"                },",
									"              },",
									"              {",
									"                index: 1,",
									"                stageType: 'Transformation',",
									"                requirements: {",
									"                  container: {",
									"                    image: 'tensorflow/tensorflow',",
									"                    tag: 'latest',",
									"                    checksum: 'sha256:cb57ecfa6ebbefd8ffc7f75c0f00e57a7fa739578a429b6f72a0df19315deadc',",
									"                  },",
									"                },",
									"                input: [",
									"                  {",
									"                    index: 0,",
									"                    previousStage: 0,",
									"                  },",
									"                ],",
									"                transformation: {",
									"                  id: 'did:nv:999999',",
									"                },",
									"                output: {",
									"                  metadataUrl: 'https://metadata.net:5000/api/v1/metadata/assets/ddo/',",
									"                  secretStoreUrl: 'http://secretstore.org:12001',",
									"                  accessProxyUrl: 'https://gateway.net:8030/api/v1/gateway/',",
									"                  metadata: {},",
									"                },",
									"              },",
									"            ],",
									"          },",
									"        },",
									"        additionalInformation: {",
									"          description: 'Workflow to aggregate weather information',",
									"          tags: ['weather', 'uk', '2011', 'workflow', 'aggregation'],",
									"          copyrightHolder: 'John Doe',",
									"        },",
									"      },",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create a standard asset\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetRatingNotValid)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should validate rating\", () => {",
									"            pm.expect(response).to.have.property('code', 400);",
									"            pm.expect(response).to.have.property('status', 'Bad Request');",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetAccess)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create an access asset\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetAlgorithm)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create an algorithm asset\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetCompute)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create a compute asset\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetService)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create a service asset\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"    });",
									"});",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(assetWorkflow)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create a workflow asset\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"@context\": \"https://w3id.org/did/v1\",\n    \"id\": \"did:nv:5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\",\n    \"created\": \"2022-04-04T07:00:17Z\",\n    \"publicKey\": [\n        {\n            \"id\": \"did:nv:5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\",\n            \"type\": \"EthereumECDSAKey\",\n            \"owner\": \"0x26Da90565e8aAA5A656d370E4CdfC9797496635a\"\n        }\n    ],\n    \"authentication\": [\n        {\n            \"type\": \"RsaSignatureAuthentication2018\",\n            \"publicKey\": \"did:nv:5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\"\n        }\n    ],\n    \"service\": [\n        {\n            \"type\": \"metadata\",\n            \"serviceEndpoint\": \"https://metadata.defi-marketplace.polygon.nevermined.rocks/api/v1/metadata/assets/ddo/did:nv:5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\",\n            \"attributes\": {\n                \"main\": {\n                    \"name\": \"Aave v2\",\n                    \"dateCreated\": \"2022-04-04T07:00:16Z\",\n                    \"author\": \"Nevermined AG\",\n                    \"license\": \"CC0: Public Domain\",\n                    \"price\": \"0\",\n                    \"datePublished\": \"2022-04-03T00:00:00Z\",\n                    \"network\": \"Ethereum\",\n                    \"files\": [\n                        {\n                            \"index\": 0,\n                            \"contentType\": \"text/csv\",\n                            \"checksum\": \"a508198b-a619-4dc0-8b13-746ac45139d6\",\n                            \"checksumType\": \"MD5\",\n                            \"contentLength\": \"136\"\n                        }\n                    ],\n                    \"type\": \"dataset\"\n                },\n                \"additionalInformation\": {\n                    \"description\": \"This dataset contains all the Borrows events between the dates Apr 03 2022 and Apr 04 2022 in the the Aave protocol version 2 in the Ethereum blockchain in CSV format. \\nThe fields contained in this file are:- User: User that sent the swap- Protocol: Protocol where the swap was executed- Blockchain: Blochain where the swap was executed- Version: version of the protocol- TrasactionId: Transaction id where the trade was executed- Token: Token borrowed- Amount: Amount of token borrowed- Timestamp: Block timestamp where the transaction was included\",\n                    \"categories\": [\n                        \"ProtocolType:Lending\",\n                        \"EventType:Borrows\",\n                        \"Blockchain:Ethereum\",\n                        \"UseCase:defi-datasets\",\n                        \"Version:0.0.5\"\n                    ],\n                    \"blockchain\": \"Ethereum\",\n                    \"version\": \"0.0.5\",\n                    \"source\": \"filecoin\",\n                    \"file_name\": \"Aave-v2-LENDBOR-Ethereum_20220403_00:00.csv\",\n                    \"key\": \"0417eb57f99403b79ce2d7be7e4f3d5d99419d15df3700cbcb7f98b1ec0d79c7b3545aa27c7f5f497d276efec9aecc4043b55023400223c07358c5c7b2c8d9242fef81f03be74fe5528e83a71f517714a0cef1e2df9566b4d135e45970a24a624d79ad75ddcb8295731f9d1bff49f6babc6d895e66876d8c4d186459b02c643d54af0bed3800afba8e05873dfa15e886c46ab47ff79ede010fb650541932cc59d711\",\n                    \"sampleUrl\": \"https://bafkreihli7bq6ikp3kfpdsd35s3edxkx7jakcdth6chjadwjw5ujg35tja.ipfs.dweb.link\"\n                },\n                \"encryptedFiles\": \"0x594633465052695a6349414e41585949415855782b75313654352b3066436f6b7036336d582b5a6e2b2b4d566a795a4157466c7a566e51494c444c754c68796578765a4772373078642b35365156536c576e2f6745717a6662787a494f2f77367439552f356d7730673172524c74494173736c6a4651684a6370617658486457394d4535735956634630375948556638782f4d5451423537344876323466305848376e73582f307838476650354a75506b6a69307573684a50496d6641366a6f6d526e7a4473616552444778464c484d527a7a59326a34716b45435950536348636179737334427a5542464d3444446b56342b474431744762524530646b6745557375546466794e6a685249664f62675561325078476b5639705243504c48596879657752745a6255624873324773666f726669397441436d677178375a4d69|0x70dddbb3d20a38fd535be8407419945d650d2b40c2a09415cbc40dd076badbafaedbe5286f6d88c575df575ad36fbc74f8a75544f24cf22f3e415e192de3653f0bcecd75506ee953fa783aafb3b87dac64fb1e896deb84bc3e7f6d3f90d536940c7cc87c07752c4259a0b8ea60111bf57c588ed2a3d430235ed558e91559ad9a\",\n                \"curation\": {\n                    \"rating\": 0.0,\n                    \"numVotes\": 0,\n                    \"isListed\": true\n                }\n            },\n            \"index\": 0\n        },\n        {\n            \"type\": \"authorization\",\n            \"serviceEndpoint\": \"https://gateway.defi-marketplace.polygon.nevermined.rocks/api/v1/gateway/services/access\",\n            \"attributes\": {\n                \"main\": {\n                    \"service\": \"PSK-RSA\",\n                    \"publicKey\": \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/EAopv83yn/OlilJc97yLR+Gtg8x+xG6A5v0oPjIb0aDzsrOFsEC7EcFhmrJ+LNUFn2q6kE/XVML80pw96mARW9fQEd2qgHFfbJY4mYLm/gANyvi4UF0mp6qoNxY8Yy3ES4j+Eu6FCfaZgHq30CkXVguH2gcDZUjedQwTO3ruBwIDAQAB\"\n                }\n            },\n            \"index\": 1\n        },\n        {\n            \"type\": \"access\",\n            \"serviceEndpoint\": \"https://gateway.defi-marketplace.polygon.nevermined.rocks/api/v1/gateway/services/access\",\n            \"templateId\": \"0x8cCc9097F05fE49fe70014a36831304C2B7d2F47\",\n            \"attributes\": {\n                \"main\": {\n                    \"name\": \"dataAssetAccessServiceAgreement\",\n                    \"creator\": \"0x26Da90565e8aAA5A656d370E4CdfC9797496635a\",\n                    \"price\": \"0\",\n                    \"timeout\": 3600,\n                    \"datePublished\": \"2022-04-04T07:00:16Z\",\n                    \"_amounts\": [\n                        \"0\"\n                    ],\n                    \"_receivers\": [\n                        \"0x26Da90565e8aAA5A656d370E4CdfC9797496635a\"\n                    ],\n                    \"_tokenAddress\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\"\n                },\n                \"serviceAgreementTemplate\": {\n                    \"contractName\": \"AccessTemplate\",\n                    \"events\": [\n                        {\n                            \"name\": \"AgreementCreated\",\n                            \"actorType\": \"consumer\",\n                            \"handler\": {\n                                \"moduleName\": \"escrowAccessTemplate\",\n                                \"functionName\": \"fulfillLockPaymentCondition\",\n                                \"version\": \"0.1\"\n                            }\n                        }\n                    ],\n                    \"fulfillmentOrder\": [\n                        \"lockPayment.fulfill\",\n                        \"access.fulfill\",\n                        \"escrowPayment.fulfill\"\n                    ],\n                    \"conditionDependency\": {\n                        \"lockPayment\": [],\n                        \"access\": [],\n                        \"escrowPayment\": [\n                            \"lockPayment\",\n                            \"access\"\n                        ]\n                    },\n                    \"conditions\": [\n                        {\n                            \"name\": \"lockPayment\",\n                            \"timelock\": 0,\n                            \"timeout\": 0,\n                            \"contractName\": \"LockPaymentCondition\",\n                            \"functionName\": \"fulfill\",\n                            \"events\": [\n                                {\n                                    \"name\": \"Fulfilled\",\n                                    \"actorType\": \"publisher\",\n                                    \"handler\": {\n                                        \"moduleName\": \"lockPaymentCondition\",\n                                        \"functionName\": \"fulfillAccessCondition\",\n                                        \"version\": \"0.1\"\n                                    }\n                                }\n                            ],\n                            \"parameters\": [\n                                {\n                                    \"name\": \"_did\",\n                                    \"type\": \"bytes32\",\n                                    \"value\": \"5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\"\n                                },\n                                {\n                                    \"name\": \"_rewardAddress\",\n                                    \"type\": \"address\",\n                                    \"value\": \"0x003948364B028970e8daf3455a8BF715B550d3E5\"\n                                },\n                                {\n                                    \"name\": \"_tokenAddress\",\n                                    \"type\": \"address\",\n                                    \"value\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\"\n                                },\n                                {\n                                    \"name\": \"_amounts\",\n                                    \"type\": \"uint256[]\",\n                                    \"value\": [\n                                        \"0\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"_receivers\",\n                                    \"type\": \"address[]\",\n                                    \"value\": [\n                                        \"0x26Da90565e8aAA5A656d370E4CdfC9797496635a\"\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"access\",\n                            \"timelock\": 0,\n                            \"timeout\": 0,\n                            \"contractName\": \"AccessCondition\",\n                            \"functionName\": \"fulfill\",\n                            \"events\": [\n                                {\n                                    \"name\": \"Fulfilled\",\n                                    \"actorType\": \"publisher\",\n                                    \"handler\": {\n                                        \"moduleName\": \"access\",\n                                        \"functionName\": \"fulfillEscrowPaymentCondition\",\n                                        \"version\": \"0.1\"\n                                    }\n                                },\n                                {\n                                    \"name\": \"TimedOut\",\n                                    \"actorType\": \"consumer\",\n                                    \"handler\": {\n                                        \"moduleName\": \"access\",\n                                        \"functionName\": \"fulfillEscrowPaymentCondition\",\n                                        \"version\": \"0.1\"\n                                    }\n                                }\n                            ],\n                            \"parameters\": [\n                                {\n                                    \"name\": \"_documentId\",\n                                    \"type\": \"bytes32\",\n                                    \"value\": \"5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\"\n                                },\n                                {\n                                    \"name\": \"_grantee\",\n                                    \"type\": \"address\",\n                                    \"value\": \"\"\n                                }\n                            ]\n                        },\n                        {\n                            \"name\": \"escrowPayment\",\n                            \"timelock\": 0,\n                            \"timeout\": 0,\n                            \"contractName\": \"EscrowPaymentCondition\",\n                            \"functionName\": \"fulfill\",\n                            \"events\": [\n                                {\n                                    \"name\": \"Fulfilled\",\n                                    \"actorType\": \"publisher\",\n                                    \"handler\": {\n                                        \"moduleName\": \"escrowPaymentCondition\",\n                                        \"functionName\": \"verifyRewardTokens\",\n                                        \"version\": \"0.1\"\n                                    }\n                                }\n                            ],\n                            \"parameters\": [\n                                {\n                                    \"name\": \"_did\",\n                                    \"type\": \"bytes32\",\n                                    \"value\": \"5e8fdbf7bc9b80bbbe53f6ee1c3fde97168742bc6798856656231e46b22d2a84\"\n                                },\n                                {\n                                    \"name\": \"_amounts\",\n                                    \"type\": \"uint256[]\",\n                                    \"value\": [\n                                        \"0\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"_receivers\",\n                                    \"type\": \"address[]\",\n                                    \"value\": [\n                                        \"0x26Da90565e8aAA5A656d370E4CdfC9797496635a\"\n                                    ]\n                                },\n                                {\n                                    \"name\": \"_sender\",\n                                    \"type\": \"address\",\n                                    \"value\": \"\"\n                                },\n                                {\n                                    \"name\": \"_tokenAddress\",\n                                    \"type\": \"address\",\n                                    \"value\": \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\"\n                                },\n                                {\n                                    \"name\": \"_lockCondition\",\n                                    \"type\": \"bytes32\",\n                                    \"value\": \"\"\n                                },\n                                {\n                                    \"name\": \"_releaseCondition\",\n                                    \"type\": \"bytes32\",\n                                    \"value\": \"\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            },\n            \"index\": 3\n        }\n    ],\n    \"proof\": {\n        \"type\": \"DDOIntegritySignature\",\n        \"created\": \"2022-04-04T07:00:19Z\",\n        \"creator\": \"0x26Da90565e8aAA5A656d370E4CdfC9797496635a\",\n        \"signatureValue\": \"0x517f33dd60b66dcd1da95d9b921bc799f263bd1aa3a61fcb3d95302b0cc0f2da00957318a08d42cb3073fbb6e72f3226bb06e99daca3f63e63187c0f190282531b\",\n        \"checksum\": {\n            \"0\": \"57260ef54e94b4e625051402ddc2bdcc5d5b528ba91159c4af64ed3fc83ed8da\",\n            \"2\": \"bc2086b95ed3ed1b362a4e4fa16e7efefac5e051b27835189779caf5806b61f3\",\n            \"3\": \"8b6bb294df596c5992c7315cdbc10e545f31bfd5c3f7c2724672623d8ec8f113\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo"
							]
						},
						"description": "Create a asset entry"
					},
					"response": [
						{
							"name": "Asset added",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"created\": \"2019-02-08T08:13:49Z\",\n  \"updated\": \"0xA99D43d86A0758d5632313b8fA3972B6088A21BB\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": 10,\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"created\": \"2021-02-01T10:55:11Z\",\n  \"updated\": \"2021-02-01T10:55:11Z\",\n  \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n  \"created\": \"2019-02-08T08:13:49Z\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n  \"created\": \"2019-02-08T08:13:49Z\",\n  \"updated\": \"2019-02-08T08:13:49Z\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller get DDO All Assets",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e431',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e431',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo?query={\"match_all\": {}}&offset=100&page=1&sort={ \"created\": \"asc\" }'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"}, (error, response) => {",
									"    pm.test(\"should get a list of ddos\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK')",
									"        pm.expect(response.json().results.some(a => a.id === pm.environment.get('did'))).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo?query={\"match_all\": {}}&page=1&sort={ \"created\": \"asc\" }",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo"
							],
							"query": [
								{
									"key": "query",
									"value": "{\"match_all\": {}}",
									"description": "execute directly queries to elasticsearch from the client"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page to retrieve"
								},
								{
									"key": "sort",
									"value": "{ \"created\": \"asc\" }",
									"description": "sort the response by specified parameter"
								}
							]
						},
						"description": "Get DDO of all assets"
					},
					"response": [
						{
							"name": "List all",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo?query={\"match_all\": {}}&text=Ipsum ipsam esse aspernatur est dicta qui doloribus animi.&offset=100&page=1&sort={ \"created\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}",
											"description": "execute directly queries to elasticsearch from the client"
										},
										{
											"key": "text",
											"value": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
											"description": "Text to search"
										},
										{
											"key": "offset",
											"value": "100",
											"description": "Page Size"
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page to retrieve"
										},
										{
											"key": "sort",
											"value": "{ \"created\": \"asc\" }",
											"description": "sort the response by specified parameter"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"results\": [\n        {\n            \"@context\": \"https://w3id.org/did/v1\",\n            \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n            \"authentication\": [\n            {\n                \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n                \"type\": \"RsaSignatureAuthentication2018\"\n            }\n            ],\n            \"created\": \"2021-02-01T10:55:11Z\",\n            \"updated\": \"2021-02-01T10:55:11Z\",\n            \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n            \"proof\": {\n            \"created\": \"2022-01-08T16:02:20Z\",\n            \"creator\": \"2022-01-08T16:02:20Z\",\n            \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n            \"type\": \"DDOIntegritySignature\"\n            },\n            \"publicKey\": [\n            {\n                \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n                \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n                \"type\": \"EthereumECDSAKey\"\n            }\n            ],\n            \"service\": [\n            {\n                \"index\": 0,\n                \"service\": \"SecretStore\",\n                \"serviceEndpoint\": \"http://localhost:12001\",\n                \"type\": \"authorization\"\n            },\n            {\n                \"index\": 1,\n                \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n                \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n                \"type\": \"access\"\n            },\n            {\n                \"attributes\": {\n                \"additionalInformation\": {\n                    \"copyrightHolder\": \"Met Office\",\n                    \"description\": \"Weather information of UK including temperature and humidity\",\n                    \"inLanguage\": \"en\",\n                    \"links\": [\n                    {\n                        \"name\": \"Sample of Asset Data\",\n                        \"type\": \"sample\",\n                        \"url\": \"https://foo.com/sample.csv\"\n                    }\n                    ],\n                    \"tags\": [\n                    \"weather\",\n                    \"uk\",\n                    \"2011\",\n                    \"temperature\",\n                    \"humidity\"\n                    ],\n                    \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n                },\n                \"curation\": {\n                    \"numVotes\": 123,\n                    \"rating\": 0.93,\n                    \"schema\": \"Binary Voting\"\n                },\n                \"main\": {\n                    \"author\": \"Met Office\",\n                    \"dateCreated\": \"2012-02-01T10:55:11Z\",\n                    \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n                    \"files\": [\n                    {\n                        \"compression\": \"zip\",\n                        \"contentLength\": \"4535431\",\n                        \"contentType\": \"text/csv\",\n                        \"encoding\": \"UTF-8\",\n                        \"index\": 0,\n                        \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                    }\n                    ],\n                    \"license\": \"CC-BY\",\n                    \"name\": \"UK Weather information 2011\",\n                    \"price\": \"10\",\n                    \"type\": \"dataset\"\n                }\n                },\n                \"index\": 2,\n                \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n                \"type\": \"metadata\"\n            }\n            ]\n        }\n    ],\n    \"total_pages\": 1,\n    \"total_results\": 1,\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo?query={\"match_all\": {}}&text=Ipsum ipsam esse aspernatur est dicta qui doloribus animi.&offset=100&page=1&sort={ \"created\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}"
										},
										{
											"key": "text",
											"value": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
											"description": "Text to search"
										},
										{
											"key": "offset",
											"value": "100",
											"description": "Page Size"
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page to retrieve"
										},
										{
											"key": "sort",
											"value": "{ \"created\": \"asc\" }",
											"description": "sort the response by specified parameter"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller get All Asset Ids",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e488',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e488',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets?query={\"match_all\": {}}&offset=100&page=1&sort={ \"created\": \"asc\" }'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"}, (error, response) => {",
									"    pm.test(\"should get a list of ddos ids\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK');",
									"        pm.expect(response.json().some(a => a === pm.environment.get('did'))).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets?query={\"match_all\": {}}&offset=100&page=1&sort={ \"created\": \"asc\" }",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets"
							],
							"query": [
								{
									"key": "query",
									"value": "{\"match_all\": {}}"
								},
								{
									"key": "offset",
									"value": "100"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page to retrieve"
								},
								{
									"key": "sort",
									"value": "{ \"created\": \"asc\" }",
									"description": "sort the response by specified parameter"
								}
							]
						},
						"description": "Get all asset Ids"
					},
					"response": [
						{
							"name": "List asset Ids",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets?query={\"match_all\": {}}&text=Ipsum ipsam esse aspernatur est dicta qui doloribus animi.&offset=100&page=0&sort={ \"createdAt\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}",
											"description": "execute directly queries to elasticsearch from the client"
										},
										{
											"key": "text",
											"value": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
											"description": "Text to search"
										},
										{
											"key": "offset",
											"value": "100",
											"description": "Page Size"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Page to retrieve"
										},
										{
											"key": "sort",
											"value": "{ \"createdAt\": \"asc\" }",
											"description": "sort the response by specified parameter"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "[\n  \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\"\n]"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets?query={\"match_all\": {}}&text=Ipsum ipsam esse aspernatur est dicta qui doloribus animi.&offset=100&page=0&sort={ \"createdAt\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}",
											"description": "execute directly queries to elasticsearch from the client"
										},
										{
											"key": "text",
											"value": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
											"description": "Text to search"
										},
										{
											"key": "offset",
											"value": "100",
											"description": "Page Size"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Page to retrieve"
										},
										{
											"key": "sort",
											"value": "{ \"createdAt\": \"asc\" }",
											"description": "sort the response by specified parameter"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller list DDO by Query",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e445',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e445',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo/query?query={\"match_all\": {}}&offset=100&page=1&sort={ \"created\": \"asc\" }'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"}, (error, response) => {",
									"    pm.test(\"should get a list of ddos by passing a query\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK')",
									"        pm.expect(response.json().results.some(a => a.id === pm.environment.get('did'))).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/query?query={\"match_all\": {}}&offset=100&page=1&sort={ \"created\": \"asc\" }",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo",
								"query"
							],
							"query": [
								{
									"key": "query",
									"value": "{\"match_all\": {}}",
									"description": "execute directly queries to elasticsearch from the client"
								},
								{
									"key": "offset",
									"value": "100",
									"description": "Page Size"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page to retrieve"
								},
								{
									"key": "sort",
									"value": "{ \"created\": \"asc\" }",
									"description": "sort the response by specified parameter"
								}
							]
						},
						"description": "Get a list of DDOs that match with the given text"
					},
					"response": [
						{
							"name": "List DDOs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/query?query={\"match_all\": {}}&offset=100&page=0&sort={ \"created\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										"query"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}",
											"description": "execute directly queries to elasticsearch from the client"
										},
										{
											"key": "offset",
											"value": "100",
											"description": "Page Size"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Page to retrieve"
										},
										{
											"key": "sort",
											"value": "{ \"created\": \"asc\" }",
											"description": "sort the response by specified parameter"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "[\n  {\n    \"@context\": \"https://w3id.org/did/v1\",\n    \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n    \"authentication\": [\n      {\n        \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n        \"type\": \"RsaSignatureAuthentication2018\"\n      }\n    ],\n    \"created\": \"2021-02-01T10:55:11Z\",\n    \"updated\": \"2021-02-01T10:55:11Z\",\n    \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n    \"proof\": {\n      \"created\": \"2022-01-08T16:02:20Z\",\n      \"creator\": \"2022-01-08T16:02:20Z\",\n      \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n      \"type\": \"DDOIntegritySignature\"\n    },\n    \"publicKey\": [\n      {\n        \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n        \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n        \"type\": \"EthereumECDSAKey\"\n      }\n    ],\n    \"service\": [\n      {\n        \"index\": 0,\n        \"service\": \"SecretStore\",\n        \"serviceEndpoint\": \"http://localhost:12001\",\n        \"type\": \"authorization\"\n      },\n      {\n        \"index\": 1,\n        \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n        \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n        \"type\": \"access\"\n      },\n      {\n        \"attributes\": {\n          \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n              {\n                \"name\": \"Sample of Asset Data\",\n                \"type\": \"sample\",\n                \"url\": \"https://foo.com/sample.csv\"\n              }\n            ],\n            \"tags\": [\n              \"weather\",\n              \"uk\",\n              \"2011\",\n              \"temperature\",\n              \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n          },\n          \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n          },\n          \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n              {\n                \"compression\": \"zip\",\n                \"contentLength\": \"4535431\",\n                \"contentType\": \"text/csv\",\n                \"encoding\": \"UTF-8\",\n                \"index\": 0,\n                \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n              }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n          }\n        },\n        \"index\": 2,\n        \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n        \"type\": \"metadata\"\n      }\n    ]\n  }\n]"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/query?query={\"match_all\": {}}&text=Ipsum ipsam esse aspernatur est dicta qui doloribus animi.&offset=100&page=1&sort={ \"created\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										"query"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}",
											"description": "execute directly queries to elasticsearch from the client"
										},
										{
											"key": "text",
											"value": "Ipsum ipsam esse aspernatur est dicta qui doloribus animi.",
											"description": "Text to search"
										},
										{
											"key": "offset",
											"value": "100",
											"description": "Page Size"
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page to retrieve"
										},
										{
											"key": "sort",
											"value": "{ \"created\": \"asc\" }",
											"description": "sort the response by specified parameter"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller get DDO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e450',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e450',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json'",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo/{{did}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"}, (error, response) => {",
									"    pm.test(\"should get a ddo\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK')",
									"        pm.expect(response.json()).to.have.property('id', pm.environment.get('did'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo",
								":did"
							],
							"variable": [
								{
									"key": "did",
									"value": "{{did}}"
								}
							]
						},
						"description": "Get DDO of a particular asset"
					},
					"response": [
						{
							"name": "Get DDO",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n  \"@context\": \"https://w3id.org/did/v1\",\n  \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n  \"authentication\": [\n    {\n      \"publicKey\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"RsaSignatureAuthentication2018\"\n    }\n  ],\n  \"created\": \"2021-02-01T10:55:11Z\",\n  \"updated\": \"2021-02-01T10:55:11Z\",\n  \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"proof\": {\n    \"created\": \"2022-01-08T16:02:20Z\",\n    \"creator\": \"2022-01-08T16:02:20Z\",\n    \"signatureValue\": \"0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b\",\n    \"type\": \"DDOIntegritySignature\"\n  },\n  \"publicKey\": [\n    {\n      \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"owner\": \"0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e\",\n      \"type\": \"EthereumECDSAKey\"\n    }\n  ],\n  \"service\": [\n    {\n      \"index\": 0,\n      \"service\": \"SecretStore\",\n      \"serviceEndpoint\": \"http://localhost:12001\",\n      \"type\": \"authorization\"\n    },\n    {\n      \"index\": 1,\n      \"purchaseEndpoint\": \"http://localhost:8030/api/v1/gateway/services/access/initialize\",\n      \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n      \"type\": \"access\"\n    },\n    {\n      \"attributes\": {\n        \"additionalInformation\": {\n          \"copyrightHolder\": \"Met Office\",\n          \"description\": \"Weather information of UK including temperature and humidity\",\n          \"inLanguage\": \"en\",\n          \"links\": [\n            {\n              \"name\": \"Sample of Asset Data\",\n              \"type\": \"sample\",\n              \"url\": \"https://foo.com/sample.csv\"\n            }\n          ],\n          \"tags\": [\n            \"weather\",\n            \"uk\",\n            \"2011\",\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n          \"numVotes\": 123,\n          \"rating\": 0.93,\n          \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n          \"author\": \"Met Office\",\n          \"dateCreated\": \"2012-02-01T10:55:11Z\",\n          \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n          \"files\": [\n            {\n              \"compression\": \"zip\",\n              \"contentLength\": \"4535431\",\n              \"contentType\": \"text/csv\",\n              \"encoding\": \"UTF-8\",\n              \"index\": 0,\n              \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n            }\n          ],\n          \"license\": \"CC-BY\",\n          \"name\": \"UK Weather information 2011\",\n          \"price\": \"10\",\n          \"type\": \"dataset\"\n        }\n      },\n      \"index\": 2,\n      \"serviceEndpoint\": \"http://mymetadata.org/api/v1/provider/assets/metadata/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430\",\n      \"type\": \"metadata\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "{{did}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did"
									],
									"variable": [
										{
											"key": "did",
											"value": "{{did}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller get DDO Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo/{{did}}/status'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"}, (error, response) => {",
									"    pm.test(\"should get a ddo\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK')",
									"        pm.expect(response.json()).to.have.property('did', pm.environment.get('did'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const asset = {",
									"  '@context': 'https://w3id.org/did/v1',",
									"  userId: pm.environment.get('userId'),",
									"  id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e451',",
									"  created: \"2019-02-08T08:13:49Z\",",
									"  authentication: [",
									"    {",
									"      publicKey: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e451',",
									"      type: 'RsaSignatureAuthentication2018',",
									"    },",
									"  ],",
									"  proof: {",
									"    created: '2022-01-08T16:02:20Z',",
									"    creator: '0xA99D43d86A0758d5632313b8fA3972B6088A21BB',",
									"    signatureValue:",
									"      '0xbd7b46b3ac664167bc70ac211b1a1da0baed9ead91613a5f02dfc25c1bb' +",
									"      '6e3ff40861b455017e8a587fd4e37b703436072598c3a81ec88be28bfe33b61554a471b',",
									"    type: 'DDOIntegritySignature',",
									"  },",
									"  publicKey: [",
									"    {",
									"      id: 'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      owner: '0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e',",
									"      type: 'EthereumECDSAKey',",
									"    },",
									"  ],",
									"  service: [",
									"    {",
									"      index: 0,",
									"      service: 'SecretStore',",
									"      serviceEndpoint: 'http://localhost:12001',",
									"      type: 'authorization',",
									"    },",
									"    {",
									"      index: 1,",
									"      purchaseEndpoint: 'http://localhost:8030/api/v1/gateway/services/access/initialize',",
									"      serviceEndpoint: 'http://localhost:8030/api/v1/gateway/services/consume',",
									"      type: 'access',",
									"    },",
									"    {",
									"      attributes: {",
									"        additionalInformation: {",
									"          copyrightHolder: 'Met Office',",
									"          description: 'Weather information of UK including temperature and humidity',",
									"          inLanguage: 'en',",
									"          links: [",
									"            {",
									"              name: 'Sample of Asset Data',",
									"              type: 'sample',",
									"              url: 'https://foo.com/sample.csv',",
									"            },",
									"          ],",
									"          tags: ['weather', 'uk', '2011', 'temperature', 'humidity'],",
									"          workExample:",
									"            'stationId,latitude,longitude,datetime, ' +",
									"            'temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68',",
									"        },",
									"        curation: {",
									"          numVotes: 123,",
									"          rating: 0.93,",
									"          schema: 'Binary Voting',",
									"        },",
									"        main: {",
									"          author: 'Met Office',",
									"          dateCreated: '2012-02-01T10:55:11Z',",
									"          encryptedFiles: '0x098213xzckasdf089723hjgdasfkjgasfv',",
									"          files: [",
									"            {",
									"              compression: 'zip',",
									"              contentLength: '4535431',",
									"              contentType: 'text/csv',",
									"              encoding: 'UTF-8',",
									"              index: 0,",
									"              resourceId: 'access-log2018-02-13-15-17-29-18386C502CAEA932',",
									"            },",
									"          ],",
									"          license: 'CC-BY',",
									"          name: 'UK Weather information 2011',",
									"          price: '10',",
									"          type: 'dataset',",
									"        },",
									"      },",
									"      index: 2,",
									"      serviceEndpoint:",
									"        'http://mymetadata.org/api/v1/provider/assets/metadata/' +",
									"        'did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e430',",
									"      type: 'metadata',",
									"    },",
									"  ],",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/ddo'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(asset)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('did', response.json().id);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/asset/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"ddo",
								":did",
								"status"
							],
							"variable": [
								{
									"key": "did",
									"value": "{{did}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get DDO status of a particular asset"
					},
					"response": [
						{
							"name": "Get a DDO status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did",
										"status"
									],
									"variable": [
										{
											"key": "did",
											"value": "did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"did\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n  \"internal\": {\n    \"id\": \"did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\",\n    \"type\": \"Elasticsearch\",\n    \"status\": \"ACCEPTED\",\n    \"url\": \"http://localhost:3100/api/v1/metadata/assets/ddo/did:nv:0c184915b07b44c888d468be85a9b28253e80070e5294b1aaed81c2f0264e429\"\n  },\n  \"external\": null\n}"
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/ddo/:did/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"ddo",
										":did",
										"status"
									],
									"variable": [
										{
											"key": "did",
											"value": "{{did}}",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Asset Controller create Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const uuid = require('uuid');",
									"",
									"const service = {",
									"    \"agreementId\": `a-${uuid.v4()}`,",
									"    \"index\": 0,",
									"    \"userId\": pm.environment.get('userId'),",
									"    \"templateId\": \"sed\",",
									"    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",",
									"    \"type\": \"p\",",
									"    \"attributes\": {",
									"        \"additionalInformation\": {",
									"            \"copyrightHolder\": \"Met Office\",",
									"            \"description\": \"Weather information of UK including temperature and humidity\",",
									"            \"inLanguage\": \"en\",",
									"            \"links\": [",
									"                {",
									"                    \"name\": \"Sample of Asset Data\",",
									"                    \"type\": \"sample\",",
									"                    \"url\": \"https://foo.com/sample.csv\"",
									"                }",
									"            ],",
									"            \"tags\": [",
									"                \"weather\",",
									"                \"uk\",",
									"                \"2011\",",
									"                \"temperature\",",
									"                \"humidity\"",
									"            ],",
									"            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"",
									"        },",
									"        \"curation\": {",
									"            \"numVotes\": 123,",
									"            \"rating\": 0.93,",
									"            \"schema\": \"Binary Voting\"",
									"        },",
									"        \"main\": {",
									"            \"author\": \"Met Office\",",
									"            \"dateCreated\": \"2012-02-01T10:55:11Z\",",
									"            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",",
									"            \"files\": [",
									"                {",
									"                    \"compression\": \"zip\",",
									"                    \"contentLength\": \"4535431\",",
									"                    \"contentType\": \"text/csv\",",
									"                    \"encoding\": \"UTF-8\",",
									"                    \"index\": 0,",
									"                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"",
									"                }",
									"            ],",
									"            \"license\": \"CC-BY\",",
									"            \"name\": \"UK Weather information 2011\",",
									"            \"price\": \"10\",",
									"            \"type\": \"dataset\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(service)",
									"        }",
									"}, (error, response) => {",
									"    pm.test(\"should create a service\", () => {",
									"        pm.expect(response).to.have.property('code', 201);",
									"        pm.expect(response).to.have.property('status', 'Created')",
									"        pm.expect(response.json()).to.have.property('agreementId', service.agreementId);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"agreementId\": \"a-123456\",\n    \"index\": 0,\n    \"userId\": \"{{userId}}\",\n    \"templateId\": \"t-12345\",\n    \"serviceEndpoint\": \"http://service.com\",\n    \"type\": \"p\",\n    \"attributes\": {\n        \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n                {\n                    \"name\": \"Sample of Asset Data\",\n                    \"type\": \"sample\",\n                    \"url\": \"https://foo.com/sample.csv\"\n                }\n            ],\n            \"tags\": [\n                \"weather\",\n                \"uk\",\n                \"2011\",\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n                {\n                    \"compression\": \"zip\",\n                    \"contentLength\": \"4535431\",\n                    \"contentType\": \"text/csv\",\n                    \"encoding\": \"UTF-8\",\n                    \"index\": 0,\n                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"service"
							]
						}
					},
					"response": [
						{
							"name": "Service Added",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"agreementId\": \"a-12334\",\n    \"index\": 0,\n    \"templateId\": \"t-12345\",\n    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n    \"type\": \"metadata\",\n    \"attributes\": {\n        \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n                {\n                    \"name\": \"Sample of Asset Data\",\n                    \"type\": \"sample\",\n                    \"url\": \"https://foo.com/sample.csv\"\n                }\n            ],\n            \"tags\": [\n                \"weather\",\n                \"uk\",\n                \"2011\",\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n                {\n                    \"compression\": \"zip\",\n                    \"contentLength\": \"4535431\",\n                    \"contentType\": \"text/csv\",\n                    \"encoding\": \"UTF-8\",\n                    \"index\": 0,\n                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"agreementId\": \"a-12334\",\n    \"index\": 0,\n    \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n    \"templateId\": \"t-12345\",\n    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n    \"type\": \"metadata\",\n    \"attributes\": {\n        \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n                {\n                    \"name\": \"Sample of Asset Data\",\n                    \"type\": \"sample\",\n                    \"url\": \"https://foo.com/sample.csv\"\n                }\n            ],\n            \"tags\": [\n                \"weather\",\n                \"uk\",\n                \"2011\",\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n                {\n                    \"compression\": \"zip\",\n                    \"contentLength\": \"4535431\",\n                    \"contentType\": \"text/csv\",\n                    \"encoding\": \"UTF-8\",\n                    \"index\": 0,\n                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n        }\n    }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"agreementId\": \"a-12334\",\n    \"index\": 0,\n    \"templateId\": \"t-12345\",\n    \"serviceEndpoint\": \"http://service.com\",\n    \"type\": \"metadata\",\n    \"attributes\": {\n        \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n                {\n                    \"name\": \"Sample of Asset Data\",\n                    \"type\": \"sample\",\n                    \"url\": \"https://foo.com/sample.csv\"\n                }\n            ],\n            \"tags\": [\n                \"weather\",\n                \"uk\",\n                \"2011\",\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n                {\n                    \"compression\": \"zip\",\n                    \"contentLength\": \"4535431\",\n                    \"contentType\": \"text/csv\",\n                    \"encoding\": \"UTF-8\",\n                    \"index\": 0,\n                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"agreementId\": \"a-12334\",\n    \"index\": 0,\n    \"templateId\": \"t-12345\",\n    \"serviceEndpoint\": \"http://service.com\",\n    \"type\": \"metadata\",\n    \"attributes\": {\n        \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n                {\n                    \"name\": \"Sample of Asset Data\",\n                    \"type\": \"sample\",\n                    \"url\": \"https://foo.com/sample.csv\"\n                }\n            ],\n            \"tags\": [\n                \"weather\",\n                \"uk\",\n                \"2011\",\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n                {\n                    \"compression\": \"zip\",\n                    \"contentLength\": \"4535431\",\n                    \"contentType\": \"text/csv\",\n                    \"encoding\": \"UTF-8\",\n                    \"index\": 0,\n                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller get Service Query Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const uuid = require('uuid');",
									"",
									"const service = {",
									"    \"agreementId\": `a-${uuid.v4()}`,",
									"    \"userId\": pm.environment.get('userId'),",
									"    \"index\": 0,",
									"    \"templateId\": \"t-12345\",",
									"    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",",
									"    \"type\": \"p\",",
									"    \"attributes\": {",
									"        \"additionalInformation\": {",
									"            \"copyrightHolder\": \"Met Office\",",
									"            \"description\": \"Weather information of UK including temperature and humidity\",",
									"            \"inLanguage\": \"en\",",
									"            \"links\": [",
									"                {",
									"                    \"name\": \"Sample of Asset Data\",",
									"                    \"type\": \"sample\",",
									"                    \"url\": \"https://foo.com/sample.csv\"",
									"                }",
									"            ],",
									"            \"tags\": [",
									"                \"weather\",",
									"                \"uk\",",
									"                \"2011\",",
									"                \"temperature\",",
									"                \"humidity\"",
									"            ],",
									"            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"",
									"        },",
									"        \"curation\": {",
									"            \"numVotes\": 123,",
									"            \"rating\": 0.93,",
									"            \"schema\": \"Binary Voting\"",
									"        },",
									"        \"main\": {",
									"            \"author\": \"Met Office\",",
									"            \"dateCreated\": \"2012-02-01T10:55:11Z\",",
									"            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",",
									"            \"files\": [",
									"                {",
									"                    \"compression\": \"zip\",",
									"                    \"contentLength\": \"4535431\",",
									"                    \"contentType\": \"text/csv\",",
									"                    \"encoding\": \"UTF-8\",",
									"                    \"index\": 0,",
									"                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"",
									"                }",
									"            ],",
									"            \"license\": \"CC-BY\",",
									"            \"name\": \"UK Weather information 2011\",",
									"            \"price\": \"10\",",
									"            \"type\": \"dataset\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(service)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('agreementId', response.json().agreementId);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const query = {",
									"  \"offset\": \"100\",",
									"  \"page\": \"1\",",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/service/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"}, (error, response) => {",
									"    pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service/query'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(query)",
									"        }",
									"    }, (error, response) => {",
									"        pm.test(\"should get a list of ddos by passing a query\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created')",
									"            pm.expect(response.json().results.some(a => a.agreementId === pm.environment.get('agreementId'))).to.be.true;",
									"        });",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offset\": \"100\",\n  \"page\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/service/query",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"service",
								"query"
							]
						},
						"description": "Get a list of services that match with the executed query."
					},
					"response": [
						{
							"name": "Get list of services",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {},\n  \"text\": \"est cillum\",\n  \"offset\": \"100\",\n  \"page\": \"0\",\n  \"sort\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service/query",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service",
										"query"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"page\": 1,\n    \"results\": [\n        {\n            \"agreementId\": \"a-12334\",\n            \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n            \"index\": 0,\n            \"templateId\": \"t-12345\",\n            \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n            \"type\": \"metadata\",\n            \"attributes\": {\n                \"additionalInformation\": {\n                    \"copyrightHolder\": \"Met Office\",\n                    \"description\": \"Weather information of UK including temperature and humidity\",\n                    \"inLanguage\": \"en\",\n                    \"links\": [\n                        {\n                            \"name\": \"Sample of Asset Data\",\n                            \"type\": \"sample\",\n                            \"url\": \"https://foo.com/sample.csv\"\n                        }\n                    ],\n                    \"tags\": [\n                        \"weather\",\n                        \"uk\",\n                        \"2011\",\n                        \"temperature\",\n                        \"humidity\"\n                    ],\n                    \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n                },\n                \"curation\": {\n                    \"numVotes\": 123,\n                    \"rating\": 0.93,\n                    \"schema\": \"Binary Voting\"\n                },\n                \"main\": {\n                    \"author\": \"Met Office\",\n                    \"dateCreated\": \"2012-02-01T10:55:11Z\",\n                    \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n                    \"files\": [\n                        {\n                            \"compression\": \"zip\",\n                            \"contentLength\": \"4535431\",\n                            \"contentType\": \"text/csv\",\n                            \"encoding\": \"UTF-8\",\n                            \"index\": 0,\n                            \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                        }\n                    ],\n                    \"license\": \"CC-BY\",\n                    \"name\": \"UK Weather information 2011\",\n                    \"price\": \"10\",\n                    \"type\": \"dataset\"\n                }\n            }\n        }\n    ],\n    \"total_pages\": 1,\n    \"total_results\": 1,\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": {},\n  \"text\": \"est cillum\",\n  \"offset\": 100,\n  \"page\": 0,\n  \"sort\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service/query",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service",
										"query"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Asset Controller get Service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const uuid = require('uuid');",
									"",
									"const service = {",
									"    \"agreementId\": `a-${uuid.v4()}`,",
									"    \"userId\": pm.environment.get('userId'),",
									"    \"index\": 0,",
									"    \"templateId\": \"t-12345\",",
									"    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",",
									"    \"type\": \"p\",",
									"    \"attributes\": {",
									"        \"additionalInformation\": {",
									"            \"copyrightHolder\": \"Met Office\",",
									"            \"description\": \"Weather information of UK including temperature and humidity\",",
									"            \"inLanguage\": \"en\",",
									"            \"links\": [",
									"                {",
									"                    \"name\": \"Sample of Asset Data\",",
									"                    \"type\": \"sample\",",
									"                    \"url\": \"https://foo.com/sample.csv\"",
									"                }",
									"            ],",
									"            \"tags\": [",
									"                \"weather\",",
									"                \"uk\",",
									"                \"2011\",",
									"                \"temperature\",",
									"                \"humidity\"",
									"            ],",
									"            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"",
									"        },",
									"        \"curation\": {",
									"            \"numVotes\": 123,",
									"            \"rating\": 0.93,",
									"            \"schema\": \"Binary Voting\"",
									"        },",
									"        \"main\": {",
									"            \"author\": \"Met Office\",",
									"            \"dateCreated\": \"2012-02-01T10:55:11Z\",",
									"            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",",
									"            \"files\": [",
									"                {",
									"                    \"compression\": \"zip\",",
									"                    \"contentLength\": \"4535431\",",
									"                    \"contentType\": \"text/csv\",",
									"                    \"encoding\": \"UTF-8\",",
									"                    \"index\": 0,",
									"                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"",
									"                }",
									"            ],",
									"            \"license\": \"CC-BY\",",
									"            \"name\": \"UK Weather information 2011\",",
									"            \"price\": \"10\",",
									"            \"type\": \"dataset\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(service)",
									"        }",
									"}, (error, response) => {",
									"    pm.environment.set('agreementId', response.json().agreementId);",
									"",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/service/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    });",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service/{{agreementId}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"}, (error, response) => {",
									"    pm.test(\"should get a ddo\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response).to.have.property('status', 'OK')",
									"        pm.expect(response.json()).to.have.property('agreementId', pm.environment.get('agreementId'));",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/service/:agreementId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"service",
								":agreementId"
							],
							"variable": [
								{
									"key": "agreementId",
									"value": "{{agreementId}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get service by passing agreementId"
					},
					"response": [
						{
							"name": "Get a service",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service/:agreementId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service",
										":agreementId"
									],
									"variable": [
										{
											"key": "agreementId",
											"value": "anim nulla aliqua in quis",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"agreementId\": \"a-12334\",\n    \"index\": 0,\n    \"userId\": \"u-0d545769-4a28-4e88-85a5-4f5a4f924f07\",\n    \"templateId\": \"t-12345\",\n    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",\n    \"type\": \"metadata\",\n    \"attributes\": {\n        \"additionalInformation\": {\n            \"copyrightHolder\": \"Met Office\",\n            \"description\": \"Weather information of UK including temperature and humidity\",\n            \"inLanguage\": \"en\",\n            \"links\": [\n                {\n                    \"name\": \"Sample of Asset Data\",\n                    \"type\": \"sample\",\n                    \"url\": \"https://foo.com/sample.csv\"\n                }\n            ],\n            \"tags\": [\n                \"weather\",\n                \"uk\",\n                \"2011\",\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"\n        },\n        \"curation\": {\n            \"numVotes\": 123,\n            \"rating\": 0.93,\n            \"schema\": \"Binary Voting\"\n        },\n        \"main\": {\n            \"author\": \"Met Office\",\n            \"dateCreated\": \"2012-02-01T10:55:11Z\",\n            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",\n            \"files\": [\n                {\n                    \"compression\": \"zip\",\n                    \"contentLength\": \"4535431\",\n                    \"contentType\": \"text/csv\",\n                    \"encoding\": \"UTF-8\",\n                    \"index\": 0,\n                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"\n                }\n            ],\n            \"license\": \"CC-BY\",\n            \"name\": \"UK Weather information 2011\",\n            \"price\": \"10\",\n            \"type\": \"dataset\"\n        }\n    }\n}"
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service/:agreementId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service",
										":agreementId"
									],
									"variable": [
										{
											"key": "agreementId",
											"value": "anim nulla aliqua in quis",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Asset Controller delete All Services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"",
									"const service = {",
									"    \"agreementId\": `a-${uuid.v4()}`,",
									"    \"index\": 0,",
									"    \"userId\": pm.environment.get('userId'),",
									"    \"templateId\": \"t-12345\",",
									"    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",",
									"    \"type\": \"p\",",
									"    \"attributes\": {",
									"        \"additionalInformation\": {",
									"            \"copyrightHolder\": \"Met Office\",",
									"            \"description\": \"Weather information of UK including temperature and humidity\",",
									"            \"inLanguage\": \"en\",",
									"            \"links\": [",
									"                {",
									"                    \"name\": \"Sample of Asset Data\",",
									"                    \"type\": \"sample\",",
									"                    \"url\": \"https://foo.com/sample.csv\"",
									"                }",
									"            ],",
									"            \"tags\": [",
									"                \"weather\",",
									"                \"uk\",",
									"                \"2011\",",
									"                \"temperature\",",
									"                \"humidity\"",
									"            ],",
									"            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"",
									"        },",
									"        \"curation\": {",
									"            \"numVotes\": 123,",
									"            \"rating\": 0.93,",
									"            \"schema\": \"Binary Voting\"",
									"        },",
									"        \"main\": {",
									"            \"author\": \"Met Office\",",
									"            \"dateCreated\": \"2012-02-01T10:55:11Z\",",
									"            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",",
									"            \"files\": [",
									"                {",
									"                    \"compression\": \"zip\",",
									"                    \"contentLength\": \"4535431\",",
									"                    \"contentType\": \"text/csv\",",
									"                    \"encoding\": \"UTF-8\",",
									"                    \"index\": 0,",
									"                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"",
									"                }",
									"            ],",
									"            \"license\": \"CC-BY\",",
									"            \"name\": \"UK Weather information 2011\",",
									"            \"price\": \"10\",",
									"            \"type\": \"dataset\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(service)",
									"        }",
									"}, (error, response) => {",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/service/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"        },",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const uuid = require('uuid');",
									"",
									"const service = {",
									"    \"agreementId\": `a-${uuid.v4()}`,",
									"    \"index\": 0,",
									"    \"userId\": pm.environment.get('userId'),",
									"    \"templateId\": \"t-12345\",",
									"    \"serviceEndpoint\": \"http://localhost:8030/api/v1/gateway/services/consume\",",
									"    \"type\": \"p\",",
									"    \"attributes\": {",
									"        \"additionalInformation\": {",
									"            \"copyrightHolder\": \"Met Office\",",
									"            \"description\": \"Weather information of UK including temperature and humidity\",",
									"            \"inLanguage\": \"en\",",
									"            \"links\": [",
									"                {",
									"                    \"name\": \"Sample of Asset Data\",",
									"                    \"type\": \"sample\",",
									"                    \"url\": \"https://foo.com/sample.csv\"",
									"                }",
									"            ],",
									"            \"tags\": [",
									"                \"weather\",",
									"                \"uk\",",
									"                \"2011\",",
									"                \"temperature\",",
									"                \"humidity\"",
									"            ],",
									"            \"workExample\": \"stationId,latitude,longitude,datetime, temperature,humidity/n423432fsd,51.509865,-0.118092, 2011-01-01T10:55:11+00:00,7.2,68\"",
									"        },",
									"        \"curation\": {",
									"            \"numVotes\": 123,",
									"            \"rating\": 0.93,",
									"            \"schema\": \"Binary Voting\"",
									"        },",
									"        \"main\": {",
									"            \"author\": \"Met Office\",",
									"            \"dateCreated\": \"2012-02-01T10:55:11Z\",",
									"            \"encryptedFiles\": \"0x098213xzckasdf089723hjgdasfkjgasfv\",",
									"            \"files\": [",
									"                {",
									"                    \"compression\": \"zip\",",
									"                    \"contentLength\": \"4535431\",",
									"                    \"contentType\": \"text/csv\",",
									"                    \"encoding\": \"UTF-8\",",
									"                    \"index\": 0,",
									"                    \"resourceId\": \"access-log2018-02-13-15-17-29-18386C502CAEA932\"",
									"                }",
									"            ],",
									"            \"license\": \"CC-BY\",",
									"            \"name\": \"UK Weather information 2011\",",
									"            \"price\": \"10\",",
									"            \"type\": \"dataset\"",
									"        }",
									"    }",
									"};",
									"",
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(service)",
									"        }",
									"}, (error, response) => {",
									"    pm.sendRequest({",
									"        url: pm.collectionVariables.replaceIn('{{elsUrl}}/service/_refresh'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.sendRequest({",
									"            url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/assets/service'),",
									"            method: 'DELETE',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"                'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"            }",
									"        }, (error, response) => {",
									"            pm.test(\"should delete all services\", () => {",
									"                pm.expect(response).to.have.property('code', 200);",
									"                pm.expect(response).to.have.property('status', 'OK')",
									"            });",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authAdmin}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"assets",
								"service"
							]
						},
						"description": "Delete all the services"
					},
					"response": [
						{
							"name": "Deleted all services",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/assets/service",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"assets",
										"service"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "api/v1/metadata/profiles",
			"item": [
				{
					"name": "User Profile Controller create User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/profiles'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"isListed\": false,",
									"                \"state\": \"confirmed\",",
									"                \"addresses\": [",
									"                    \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947265\"",
									"                ],",
									"                \"nickname\": \"nevermined\",",
									"                \"name\": \"est tempor ut officia\",",
									"                \"email\": \"test@nevermined.io\",",
									"                \"additionalInformation\": {",
									"                    \"profilePicture\": \"http://example.com/avatar.jpg\",",
									"                    \"linkedinProfile\": \"http://linkedin.com\"",
									"                }",
									"            })",
									"        }",
									"    }, (error, response) => {",
									"        pm.test(\"should create a user profile\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"            pm.expect(response.json()).to.have.property('nickname', 'nevermined');",
									"        })",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authAdmin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947264\"\n    ],\n    \"nickname\": \"dolor irure\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/profiles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"profiles"
							]
						},
						"description": "Create a user profile entry"
					},
					"response": [
						{
							"name": "Create user profile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"dolor irure\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"userId\": \"u-0c63ac3f-f092-4951-9e21-a5a010dd7d94\",\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"nevermined\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"creationDate\": \"2022-04-22T09:54:14.415Z\",\n    \"updateDate\": \"2022-04-22T09:54:14.415Z\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"dolor irure\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"dolor irure\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "User Profile Controller get User Profile By User Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/profiles/{{userId}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        }",
									"    }, (error, response) => {",
									"        pm.test(\"should get a user profile\", () => {",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response).to.have.property('status', 'OK');",
									"            pm.expect(response.json()).to.have.property('userId', pm.environment.get('userId'));",
									"        })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"profiles",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get the metadata of a user profile "
					},
					"response": [
						{
							"name": "Get user profile",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"userId\": \"u-0c63ac3f-f092-4951-9e21-a5a010dd7d94\",\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"nevermined\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"creationDate\": \"2022-04-22T09:54:14.415Z\",\n    \"updateDate\": \"2022-04-22T09:54:14.415Z\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"name": "Content-Type",
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "User Profile Controller update User Profile By User Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/profiles/{{userId}}'),",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            email: \"test2@nevermined.io\",",
									"        }),",
									"    }",
									"}, (error, response) => {",
									"    pm.test(\"should update user profile by passing userId\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response.json()).to.have.property('email', 'test2@nevermined.io');",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isListed\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"profiles",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Update the user profile"
					},
					"response": [
						{
							"name": "Update user profile",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"userId\": \"u-5f94bc38-1178-435d-80bd-518eb1a0986d\",\n    \"isListed\": true,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"nevermined\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"creationDate\": \"2022-04-22T10:10:45.529Z\",\n    \"updateDate\": \"2022-04-22T10:10:45.529Z\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isListed\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "User Profile Controller get User Profile By Address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/metadata/profiles/address/{{publicAddress}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        }",
									"    }, (error, response) => {",
									"        pm.test(\"should get a user profile\", () => {",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response).to.have.property('status', 'OK');",
									"            pm.expect(response.json().addresses.some(a => pm.environment.get('publicAddress'))).to.be.true;",
									"        })",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/profiles/address/:publicAddress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"profiles",
								"address",
								":publicAddress"
							],
							"variable": [
								{
									"key": "publicAddress",
									"value": "{{publicAddress}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get the metadata of a user profile given an address"
					},
					"response": [
						{
							"name": "Get user profile",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/address/:publicAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										"address",
										":publicAddress"
									],
									"variable": [
										{
											"key": "publicAddress",
											"value": "0xe2DD09d719Da89e5a3D0F2549c7E24566e947260",
											"description": "(Required) "
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"userId\": \"u-c93116f6-219a-4cf7-bee7-c43ac26f03ff\",\n    \"isListed\": false,\n    \"state\": \"confirmed\",\n    \"addresses\": [\n        \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n    ],\n    \"nickname\": \"nevermined\",\n    \"name\": \"est tempor ut officia\",\n    \"email\": \"test@nevermined.io\",\n    \"creationDate\": \"2022-04-22T12:09:26.620Z\",\n    \"updateDate\": \"2022-04-22T12:09:26.620Z\",\n    \"additionalInformation\": {\n        \"profilePicture\": \"http://example.com/avatar.jpg\",\n        \"linkedinProfile\": \"http://linkedin.com\"\n    }\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/address/:publicAddress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										"address",
										":publicAddress"
									],
									"variable": [
										{
											"key": "publicAddress",
											"value": "0xe2DD09d719Da89e5a3D0F2549c7E24566e947260",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "User Profile Controller disable User Profile By User Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.replaceIn(`{{baseUrl}}/api/v1/metadata/profiles/{{userId}}`),",
									"    method: 'DELETE',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.environment.get('authToken')}`",
									"    }",
									"}, (error, response) => {",
									"    pm.test(\"should delete user profile by passing userId\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"metadata",
								"profiles",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Disable the user profile"
					},
					"response": [
						{
							"name": "Delete user profile",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "u-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/metadata/profiles/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"metadata",
										"profiles",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "a-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "api/v1/permissions",
			"item": [
				{
					"name": "Permission Controller create Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/permissions'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"userId\": pm.environment.get('userId'),",
									"                \"type\": [",
									"                    \"read\",",
									"                    \"update\",",
									"                    \"delete\"",
									"                ],",
									"                \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",",
									"                \"holder\": pm.environment.get('publicAddress')",
									"            })",
									"        }",
									"    }, (error, response) => {",
									"        pm.test(\"should create a permission\", () => {",
									"            pm.expect(response).to.have.property('code', 201);",
									"            pm.expect(response).to.have.property('status', 'Created');",
									"            pm.expect(response.json()).to.have.property('userId', pm.environment.get('userId'));",
									"            pm.environment.set('id', response.json().id);",
									"        });",
									"        ",
									"        pm.sendRequest({",
									"            url: pm.collectionVariables.replaceIn('{{elsUrl}}/permission/_refresh'),",
									"            method: 'POST',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            },",
									"        });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"{{publicAddress}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"permissions"
							]
						},
						"description": "Create a permission entry"
					},
					"response": [
						{
							"name": "Permission is created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n  \"id\": \"pe-2e83acb9-441d-41c8-97ab-552b4b52452d\",\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\",\n  \"issuanceDate\": \"2019-01-01T19:73:24Z\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweGUyREQwOWQ3MTlEYTg5ZTVhM0QwRjI1NDljN0UyNDU2NmU5NDcyNjAiLCJpYXQiOjE2NTA2MzczNTIsImV4cCI6MTY1MDY0MDk1Mn0.CXLmOVBA_i5mcgaHWAnmXOy6HEB7Lr_5gEjGSb36VDQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Permission Controller get Permission by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/permissions/{{id}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.test(\"should get a permission by passing id\", () => {",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response).to.have.property('status', 'OK');",
									"            pm.expect(response.json()).to.have.property('userId', pm.environment.get('userId'));",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						},
						"description": "Get permission by Id"
					},
					"response": [
						{
							"name": "Permission returned",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n  \"id\": \"pe-2e83acb9-441d-41c8-97ab-552b4b52452d\",\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"read\",\n    \"update\",\n    \"delete\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\",\n  \"issuanceDate\": \"2019-01-01T19:73:24Z\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Permission Controller get Permission By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/permissions/user/{{userId}}'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.test(\"should get permissions by passing userId\", () => {",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response).to.have.property('status', 'OK');",
									"            pm.expect(response.json().results.some(r => r.userId === pm.environment.get('userId'))).to.be.true;",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/permissions/user/:userId?query={\"match_all\": {}}&page=1&sort={ \"issuanceDate\": \"asc\" }",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"permissions",
								"user",
								":userId"
							],
							"query": [
								{
									"key": "query",
									"value": "{\"match_all\": {}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "sort",
									"value": "{ \"issuanceDate\": \"asc\" }"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Get permissions by userId"
					},
					"response": [
						{
							"name": "Permission Controller get Permission By User Id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/user/:userId?query={\"match_all\": {}}&page=1&sort={ \"issuanceDate\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										"user",
										":userId"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "{ \"issuanceDate\": \"asc\" }"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "us-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n  \"page\": 1,\n  \"results\": [\n    {\n      \"id\": \"pe-f2b43439-61dc-4418-b6ad-87ffddf85efb\",\n      \"userId\": \"us-12345\",\n      \"type\": [\n        \"quis\",\n        \"Excepteur Ut nisi laborum aute\"\n      ],\n      \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n      \"holder\": \"0x37BB53e3d293494DE59fBe1FF78500423dcFd43B\",\n      \"issuanceDate\": \"1995-04-12T00:01:48.964Z\"\n    },\n    {\n      \"id\": \"pe-f2b43439-61dc-4418-b6ad-87ffddf85efb\",\n      \"userId\": \"us-12345\",\n      \"type\": [\n        \"ut consequat ad amet sunt\",\n        \"ad adipisicing Lorem cillum\"\n      ],\n      \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n      \"holder\": \"0x37BB53e3d293494DE59fBe1FF78500423dcFd43B\",\n      \"issuanceDate\": \"1995-01-27T08:43:21.521Z\"\n    }\n  ],\n  \"total_pages\": 10,\n  \"total_results\": 220\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/user/:userId?query={\"match_all\": {}}&page=1&sort={ \"issuanceDate\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										"user",
										":userId"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "{ \"issuanceDate\": \"asc\" }"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "us-12345",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Permission Controller get Permission By User Id And Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/permissions/user/{{userId}}/read'),",
									"        method: 'GET',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"        },",
									"    }, (error, response) => {",
									"        pm.test(\"should get permissions by passing userId and type\", () => {",
									"            pm.expect(response).to.have.property('code', 200);",
									"            pm.expect(response).to.have.property('status', 'OK');",
									"            pm.expect(response.json().results.some(r => r.userId === pm.environment.get('userId'))).to.be.true;",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/permissions/user/:userId/:type?query={\"match_all\": {}}&page=1&sort={ \"issuanceDate\": \"asc\" }",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"permissions",
								"user",
								":userId",
								":type"
							],
							"query": [
								{
									"key": "query",
									"value": "{\"match_all\": {}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "sort",
									"value": "{ \"issuanceDate\": \"asc\" }"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) "
								},
								{
									"key": "type",
									"value": "read",
									"description": "(Required) "
								}
							]
						},
						"description": "Get permissions by userId and type"
					},
					"response": [
						{
							"name": "Permissions are returned",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/user/:userId/:type?query={\"match_all\": {}}&text=Quibusdam doloremque iure qui odit quo ipsam id.&offset=et laboris ullamco esse&page=pariatur veniam&sort={ \"createdAt\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										"user",
										":userId",
										":type"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}"
										},
										{
											"key": "text",
											"value": "Quibusdam doloremque iure qui odit quo ipsam id."
										},
										{
											"key": "offset",
											"value": "et laboris ullamco esse"
										},
										{
											"key": "page",
											"value": "pariatur veniam"
										},
										{
											"key": "sort",
											"value": "{ \"createdAt\": \"asc\" }"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "dolore proident",
											"description": "(Required) "
										},
										{
											"key": "type",
											"value": "dolore proident",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"page\": 1,\n  \"results\": [\n    {\n      \"id\": \"pe-f2b43439-61dc-4418-b6ad-87ffddf85efb\",\n      \"userId\": \"us-12345\",\n      \"type\": [\n        \"quis\",\n        \"Excepteur Ut nisi laborum aute\"\n      ],\n      \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n      \"holder\": \"0x37BB53e3d293494DE59fBe1FF78500423dcFd43B\",\n      \"issuanceDate\": \"1995-04-12T00:01:48.964Z\"\n    },\n    {\n      \"id\": \"pe-f2b43439-61dc-4418-b6ad-87ffddf85efb\",\n      \"userId\": \"us-12345\",\n      \"type\": [\n        \"ut consequat ad amet sunt\",\n        \"ad adipisicing Lorem cillum\"\n      ],\n      \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n      \"holder\": \"0x37BB53e3d293494DE59fBe1FF78500423dcFd43B\",\n      \"issuanceDate\": \"1995-01-27T08:43:21.521Z\"\n    }\n  ],\n  \"total_pages\": 10,\n  \"total_results\": 220\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/user/:userId/:type?query={\"match_all\": {}}&text=Quibusdam doloremque iure qui odit quo ipsam id.&offset=et laboris ullamco esse&page=pariatur veniam&sort={ \"createdAt\": \"asc\" }",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										"user",
										":userId",
										":type"
									],
									"query": [
										{
											"key": "query",
											"value": "{\"match_all\": {}}"
										},
										{
											"key": "text",
											"value": "Quibusdam doloremque iure qui odit quo ipsam id."
										},
										{
											"key": "offset",
											"value": "et laboris ullamco esse"
										},
										{
											"key": "page",
											"value": "pariatur veniam"
										},
										{
											"key": "sort",
											"value": "{ \"createdAt\": \"asc\" }"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "dolore proident",
											"description": "(Required) "
										},
										{
											"key": "type",
											"value": "dolore proident",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Permission Controller update Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.replaceIn('{{baseUrl}}/api/v1/permissions/{{id}}'),",
									"    method: 'PUT',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            type: ['admin'],",
									"        }),",
									"    }",
									"}, (error, response) => {",
									"    pm.test(\"should update permission by passing id\", () => {",
									"        pm.expect(response).to.have.property('code', 200);",
									"        pm.expect(response.json().type[0]).to.have.eq('admin');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": [\n    \"read\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Update the user profile"
					},
					"response": [
						{
							"name": "Permission Updated",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": [\n    \"update\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n  \"id\": \"pe-2e83acb9-441d-41c8-97ab-552b4b52452d\",\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"update\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\",\n  \"issuanceDate\": \"2019-01-01T19:73:24Z\"\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": [\n    \"update\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": [\n    \"update\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n  \"id\": \"pe-2e83acb9-441d-41c8-97ab-552b4b52452d\",\n  \"userId\": \"us-12345\",\n  \"type\": [\n    \"update\"\n  ],\n  \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",\n  \"holder\": \"0xe2DD09d719Da89e5a3D0F2549c7E24566e947260\",\n  \"issuanceDate\": \"2019-01-01T19:73:24Z\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": [\n    \"update\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": [\n    \"read\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Permission Controller delete permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"        url: pm.environment.replaceIn('{{baseUrl}}/api/v1/permissions'),",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                \"userId\": pm.environment.get('userId'),",
									"                \"type\": [",
									"                    \"read\",",
									"                    \"update\",",
									"                    \"delete\"",
									"                ],",
									"                \"issuer\": \"0x610D9314EDF2ced7681BA1633C33fdb8cF365a12\",",
									"                \"holder\": pm.environment.get('publicAddress')",
									"            })",
									"        }",
									"    }, (permissionError, permissionResponse) => {        ",
									"        pm.sendRequest({",
									"            url: pm.collectionVariables.replaceIn('{{elsUrl}}/permission/_refresh'),",
									"            method: 'POST',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"            },",
									"        }, (error, response) => {",
									"            pm.sendRequest({",
									"                url: pm.environment.replaceIn(`{{baseUrl}}/api/v1/permissions/${permissionResponse.json().id}`),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'Content-Type': 'application/json',",
									"                    'Authorization': `Bearer ${pm.environment.get('authAdmin')}`",
									"                }",
									"            }, (error, response) => {",
									"                pm.test(\"should delete permission by passing id\", () => {",
									"                    pm.expect(response).to.have.property('code', 200);",
									"                });",
									"            });",
									"        });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/permissions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"permissions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{id}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Delete a permission"
					},
					"response": [
						{
							"name": "Permission deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "pe-2e83acb9-441d-41c8-97ab-552b4b52452d",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{authAdmin}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{id}}",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/",
			"type": "string"
		},
		{
			"key": "id",
			"value": "",
			"type": "any"
		},
		{
			"key": "userId",
			"value": "",
			"type": "any"
		},
		{
			"key": "elsUrl",
			"value": "http://localhost:9200",
			"type": "any"
		}
	]
}